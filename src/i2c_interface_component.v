/* Generated by Yosys 0.36+58 (git sha1 ea7818d31, clang 14.0.0-1ubuntu1.1 -fPIC -Os) */

module i2c_interface_component(p_clock, p_reset, component_mode, m_start_dump, i2c_addr_i, i2c_read_e, m_data_dump, SCL, SDA);
  wire _000_;
  wire _001_;
  wire [4:0] _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire [4:0] _006_;
  wire [4:0] _007_;
  wire [4:0] _008_;
  wire [4:0] _009_;
  wire _010_;
  wire [4:0] _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire [31:0] _015_;
  wire [31:0] _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire [31:0] _020_;
  wire _021_;
  wire [7:0] _022_;
  wire [4:0] _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire [7:0] _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire [4:0] _032_;
  wire _033_;
  wire _034_;
  wire [4:0] _035_;
  wire _036_;
  wire [4:0] _037_;
  wire _038_;
  wire _039_;
  wire [4:0] _040_;
  wire _041_;
  wire [4:0] _042_;
  wire _043_;
  wire [4:0] _044_;
  wire _045_;
  wire _046_;
  wire [7:0] _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire [7:0] _051_;
  wire [2:0] _052_;
  wire [7:0] _053_;
  wire _054_;
  wire [31:0] _055_;
  wire [4:0] _056_;
  wire [39:0] _057_;
  wire [39:0] _058_;
  wire [4:0] _059_;
  wire [4:0] _060_;
  reg [4:0] _061_;
  wire _062_;
  wire [4:0] _063_;
  reg [4:0] _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire [7:0] _069_;
  reg [7:0] _070_;
  wire _071_;
  wire _072_;
  reg _073_ = 1'h0;
  reg _074_ = 1'h0;
  wire _075_;
  wire _076_;
  reg _077_ = 1'h0;
  wire _078_;
  wire _079_;
  wire [7:0] _080_;
  reg [7:0] _081_ = 8'h00;
  wire _082_;
  wire [2:0] _083_;
  reg [2:0] _084_ = 3'h0;
  wire _085_;
  wire [7:0] _086_;
  reg [7:0] _087_ = 8'h00;
  wire _088_;
  wire [4:0] _089_;
  wire _090_;
  reg _091_ = 1'h0;
  wire _092_;
  wire [31:0] _093_;
  reg [31:0] _094_ = 32'd0;
  reg [39:0] _095_ = 40'h48656c6c6f;
  reg [39:0] _096_ = 40'h0706050403;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire [4:0] _102_;
  wire _103_;
  wire [4:0] _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire [4:0] _109_;
  wire [4:0] _110_;
  wire [7:0] _111_;
  wire _112_;
  wire [4:0] _113_;
  wire _114_;
  wire _115_;
  wire [4:0] _116_;
  wire _117_;
  wire [4:0] _118_;
  wire _119_;
  wire [4:0] _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire [4:0] _124_;
  wire _125_;
  wire [31:0] _126_;
  wire [4:0] _127_;
  wire [4:0] _128_;
  wire _129_;
  wire _130_;
  wire _131_;
  wire [7:0] _132_;
  wire _133_;
  wire [7:0] _134_;
  wire [7:0] _135_;
  wire _136_;
  wire [4:0] _137_;
  wire _138_;
  wire _139_;
  wire _140_;
  wire _141_;
  wire [4:0] _142_;
  wire [2:0] _143_;
  wire _144_;
  wire [7:0] _145_;
  wire _146_;
  wire [31:0] _147_;
  wire [4:0] _148_;
  wire _149_;
  wire _150_;
  wire _151_;
  wire [4:0] _152_;
  wire [31:0] _153_;
  wire _154_;
  wire _155_;
  wire [39:0] _156_;
  wire [39:0] _157_;
  wire [31:0] _158_;
  wire _159_;
  wire [39:0] _160_;
  wire [4:0] _161_;
  wire [4:0] _162_;
  wire [31:0] _163_;
  wire [39:0] _164_;
  wire [39:0] _165_;
  wire _166_;
  wire [4:0] _167_;
  wire [4:0] _168_;
  wire [31:0] _169_;
  wire [39:0] _170_;
  wire [39:0] _171_;
  wire [4:0] _172_;
  wire [4:0] _173_;
  wire _174_;
  wire _175_;
  wire _176_;
  wire _177_;
  wire _178_;
  wire [4:0] _179_;
  wire [4:0] _180_;
  wire [4:0] _181_;
  wire _182_;
  wire [4:0] _183_;
  wire _184_;
  wire [31:0] _185_;
  wire [31:0] _186_;
  wire _187_;
  inout SCL;
  wire SCL;
  inout SDA;
  wire SDA;
  input component_mode;
  wire component_mode;
  wire [31:0] counter;
  wire [39:0] data_vector_s;
  wire [7:0] first_data;
  wire first_data_acqrd;
  input [6:0] i2c_addr_i;
  wire [6:0] i2c_addr_i;
  wire \i2c_master:21 ;
  wire [7:0] \i2c_master:22 ;
  wire \i2c_master:23 ;
  wire \i2c_master:25 ;
  wire \i2c_master:26 ;
  wire \i2c_master:27 ;
  wire \i2c_master:28 ;
  input i2c_read_e;
  wire i2c_read_e;
  wire [6:0] i2c_target_addr;
  wire [7:0] m_address;
  output m_data_dump;
  wire m_data_dump;
  input m_start_dump;
  wire m_start_dump;
  wire m_write_e;
  wire \memory:18 ;
  input p_clock;
  wire p_clock;
  input p_reset;
  wire p_reset;
  wire [15:0] preescaler_aux;
  wire reg_component_mode;
  wire [39:0] req_reg_vector_s;
  wire sc_done_o;
  wire scl_pad_i;
  wire scl_pad_o;
  wire scl_padoen_o;
  wire sda_pad_i;
  wire sda_pad_o;
  wire sda_padoen_o;
  wire [4:0] \statemachine.c_state ;
  wire [4:0] \statemachine.callback_state ;
  wire wb_ack_o;
  wire [2:0] wb_adr_i;
  wire wb_cyc_i;
  wire [7:0] wb_dat_i;
  wire [7:0] wb_data_i;
  wire wb_rst_i;
  wire wb_stb_i;
  wire wb_we_i;
  assign _112_ = \statemachine.c_state  == 5'h0e;
  assign _113_ = sc_done_o ? 5'h12 : 5'h0f;
  assign _114_ = \statemachine.c_state  == 5'h0f;
  assign _115_ = wb_ack_o ? 1'h0 : 1'h1;
  assign _116_ = wb_ack_o ? 5'h05 : 5'h04;
  assign _117_ = \statemachine.c_state  == 5'h04;
  assign _118_ = sc_done_o ? 5'h14 : 5'h05;
  assign _119_ = \statemachine.c_state  == 5'h05;
  assign _120_ = wb_ack_o ? 5'h06 : 5'h14;
  assign _121_ = \statemachine.c_state  == 5'h14;
  assign _123_ = wb_ack_o ? 1'h0 : 1'h1;
  assign _124_ = wb_ack_o ? 5'h08 : 5'h06;
  assign _125_ = \statemachine.c_state  == 5'h06;
  assign _126_ = sc_done_o ? 32'd40 : counter;
  assign _127_ = sc_done_o ? 5'h15 : 5'h08;
  assign _128_ = sc_done_o ? 5'h09 : \statemachine.callback_state ;
  assign _129_ = \statemachine.c_state  == 5'h08;
  assign _130_ = ~ reg_component_mode;
  assign _131_ = ~ i2c_read_e;
  assign _132_ = _131_ ? data_vector_s[7:0] : req_reg_vector_s[7:0];
  assign _134_ = reg_component_mode ? 8'he3 : wb_dat_i;
  assign _135_ = _130_ ? _132_ : _134_;
  assign _136_ = wb_ack_o ? 1'h0 : 1'h1;
  assign _137_ = wb_ack_o ? 5'h0a : 5'h09;
  assign _138_ = \statemachine.c_state  == 5'h09;
  assign _139_ = $signed(counter) > $signed(32'd1);
  assign _140_ = _139_ | reg_component_mode;
  assign _141_ = wb_ack_o ? 1'h0 : 1'h1;
  assign _142_ = wb_ack_o ? 5'h0b : 5'h0a;
  assign _143_ = _140_ ? 3'h4 : wb_adr_i;
  assign _145_ = _140_ ? 8'h10 : wb_dat_i;
  assign _146_ = _140_ ? _141_ : wb_we_i;
  assign _147_ = _140_ ? counter : 32'd40;
  assign _148_ = _140_ ? _142_ : 5'h16;
  assign _149_ = \statemachine.c_state  == 5'h0a;
  assign _150_ = ~ reg_component_mode;
  assign _151_ = ~ i2c_read_e;
  assign _152_ = _151_ ? 5'h09 : 5'h10;
  assign _153_ = counter - 32'd8;
  assign _154_ = ~ i2c_read_e;
  assign _156_ = _159_ ? { 8'h00, data_vector_s[39:8] } : data_vector_s;
  assign _157_ = _154_ ? req_reg_vector_s : { 8'h00, req_reg_vector_s[39:8] };
  assign _158_ = _150_ ? _153_ : counter;
  assign _159_ = _150_ & _154_;
  assign _160_ = _150_ ? _157_ : req_reg_vector_s;
  assign _161_ = _150_ ? 5'h15 : \statemachine.c_state ;
  assign _162_ = _150_ ? _152_ : \statemachine.callback_state ;
  assign _163_ = reg_component_mode ? counter : _158_;
  assign _164_ = reg_component_mode ? data_vector_s : _156_;
  assign _165_ = reg_component_mode ? req_reg_vector_s : _160_;
  assign _167_ = reg_component_mode ? 5'h15 : _161_;
  assign _168_ = reg_component_mode ? 5'h10 : _162_;
  assign _169_ = sc_done_o ? _163_ : counter;
  assign _170_ = sc_done_o ? _164_ : data_vector_s;
  assign _171_ = sc_done_o ? _165_ : req_reg_vector_s;
  assign _172_ = sc_done_o ? _167_ : 5'h0b;
  assign _173_ = sc_done_o ? _168_ : \statemachine.callback_state ;
  assign _174_ = \statemachine.c_state  == 5'h0b;
  assign _175_ = ~ reg_component_mode;
  assign _176_ = ~ first_data_acqrd;
  assign _178_ = i2c_read_e & _176_;
  assign _179_ = _178_ ? 5'h0f : 5'h11;
  assign _180_ = reg_component_mode ? _179_ : \statemachine.c_state ;
  assign _181_ = _175_ ? 5'h11 : _180_;
  assign _182_ = wb_ack_o ? 1'h0 : 1'h1;
  assign _183_ = wb_ack_o ? _181_ : 5'h10;
  assign _184_ = \statemachine.c_state  == 5'h10;
  assign _185_ = counter + 32'd8;
  assign _186_ = _187_ ? _185_ : counter;
  assign _187_ = sc_done_o & reg_component_mode;
  assign _002_ = sc_done_o ? 5'h12 : 5'h11;
  assign _003_ = \statemachine.c_state  == 5'h11;
  assign _004_ = ~ reg_component_mode;
  assign _005_ = ~ first_data_acqrd;
  assign _006_ = _005_ ? 5'h07 : 5'h13;
  assign _007_ = reg_component_mode ? _006_ : \statemachine.c_state ;
  assign _008_ = _004_ ? 5'h13 : _007_;
  assign _009_ = sc_done_o ? _008_ : 5'h12;
  assign _010_ = \statemachine.c_state  == 5'h12;
  assign _011_ = wb_ack_o ? 5'h10 : 5'h07;
  assign _013_ = \statemachine.c_state  == 5'h07;
  assign _014_ = ~ reg_component_mode;
  assign _015_ = 32'd40 - counter;
  assign _016_ = $signed(_015_) / $signed(32'd8);
  assign _017_ = first_data[7:1] == i2c_addr_i;
  assign _018_ = ~ first_data[0];
  assign _019_ = _018_ & _017_;
  assign _020_ = $signed(counter) / $signed(32'd8);
  assign _021_ = _024_ ? 1'h1 : m_write_e;
  assign _022_ = _025_ ? _020_[7:0] : m_address;
  assign _024_ = reg_component_mode & _019_;
  assign _025_ = reg_component_mode & _019_;
  assign _026_ = _014_ ? 1'h1 : _021_;
  assign _027_ = _014_ ? _016_[7:0] : _022_;
  assign _028_ = ~ reg_component_mode;
  assign _029_ = first_data[7:1] == i2c_addr_i;
  assign _030_ = first_data[0] & _029_;
  assign _031_ = _028_ | _030_;
  assign _032_ = _031_ ? 5'h09 : 5'h10;
  assign _033_ = wb_ack_o ? 1'h0 : _026_;
  assign _035_ = wb_ack_o ? _032_ : 5'h13;
  assign _036_ = \statemachine.c_state  == 5'h13;
  assign _037_ = wb_ack_o ? 5'h0c : 5'h16;
  assign _038_ = \statemachine.c_state  == 5'h16;
  assign _039_ = wb_ack_o ? 1'h0 : 1'h1;
  assign _040_ = wb_ack_o ? 5'h0d : 5'h0c;
  assign _041_ = \statemachine.c_state  == 5'h0c;
  assign _042_ = sc_done_o ? 5'h15 : 5'h0d;
  assign _043_ = \statemachine.c_state  == 5'h0d;
  assign _044_ = sc_done_o ? \statemachine.callback_state  : 5'h15;
  assign _046_ = \statemachine.c_state  == 5'h15;
  function [7:0] \337 ;
    input [7:0] a;
    input [183:0] b;
    input [22:0] s;
    (* parallel_case *)
    casez (s)
      23'b??????????????????????1:
        \337  = b[7:0];
      23'b?????????????????????1?:
        \337  = b[15:8];
      23'b????????????????????1??:
        \337  = b[23:16];
      23'b???????????????????1???:
        \337  = b[31:24];
      23'b??????????????????1????:
        \337  = b[39:32];
      23'b?????????????????1?????:
        \337  = b[47:40];
      23'b????????????????1??????:
        \337  = b[55:48];
      23'b???????????????1???????:
        \337  = b[63:56];
      23'b??????????????1????????:
        \337  = b[71:64];
      23'b?????????????1?????????:
        \337  = b[79:72];
      23'b????????????1??????????:
        \337  = b[87:80];
      23'b???????????1???????????:
        \337  = b[95:88];
      23'b??????????1????????????:
        \337  = b[103:96];
      23'b?????????1?????????????:
        \337  = b[111:104];
      23'b????????1??????????????:
        \337  = b[119:112];
      23'b???????1???????????????:
        \337  = b[127:120];
      23'b??????1????????????????:
        \337  = b[135:128];
      23'b?????1?????????????????:
        \337  = b[143:136];
      23'b????1??????????????????:
        \337  = b[151:144];
      23'b???1???????????????????:
        \337  = b[159:152];
      23'b??1????????????????????:
        \337  = b[167:160];
      23'b?1?????????????????????:
        \337  = b[175:168];
      23'b1??????????????????????:
        \337  = b[183:176];
      default:
        \337  = a;
    endcase
  endfunction
  assign _047_ = \337 (8'hxx, { first_data, first_data, first_data, first_data, first_data, wb_data_i, first_data, first_data, first_data, first_data, first_data, first_data, first_data, first_data, first_data, first_data, first_data, first_data, first_data, first_data, first_data, first_data, first_data }, { _046_, _043_, _041_, _038_, _036_, _013_, _010_, _003_, _184_, _174_, _149_, _138_, _129_, _125_, _121_, _119_, _117_, _114_, _112_, _105_, _099_, _067_, _034_ });
  function [0:0] \340 ;
    input [0:0] a;
    input [22:0] b;
    input [22:0] s;
    (* parallel_case *)
    casez (s)
      23'b??????????????????????1:
        \340  = b[0:0];
      23'b?????????????????????1?:
        \340  = b[1:1];
      23'b????????????????????1??:
        \340  = b[2:2];
      23'b???????????????????1???:
        \340  = b[3:3];
      23'b??????????????????1????:
        \340  = b[4:4];
      23'b?????????????????1?????:
        \340  = b[5:5];
      23'b????????????????1??????:
        \340  = b[6:6];
      23'b???????????????1???????:
        \340  = b[7:7];
      23'b??????????????1????????:
        \340  = b[8:8];
      23'b?????????????1?????????:
        \340  = b[9:9];
      23'b????????????1??????????:
        \340  = b[10:10];
      23'b???????????1???????????:
        \340  = b[11:11];
      23'b??????????1????????????:
        \340  = b[12:12];
      23'b?????????1?????????????:
        \340  = b[13:13];
      23'b????????1??????????????:
        \340  = b[14:14];
      23'b???????1???????????????:
        \340  = b[15:15];
      23'b??????1????????????????:
        \340  = b[16:16];
      23'b?????1?????????????????:
        \340  = b[17:17];
      23'b????1??????????????????:
        \340  = b[18:18];
      23'b???1???????????????????:
        \340  = b[19:19];
      23'b??1????????????????????:
        \340  = b[20:20];
      23'b?1?????????????????????:
        \340  = b[21:21];
      23'b1??????????????????????:
        \340  = b[22:22];
      default:
        \340  = a;
    endcase
  endfunction
  assign _048_ = \340 (1'hx, { first_data_acqrd, first_data_acqrd, first_data_acqrd, first_data_acqrd, first_data_acqrd, 1'h1, first_data_acqrd, first_data_acqrd, first_data_acqrd, first_data_acqrd, first_data_acqrd, first_data_acqrd, first_data_acqrd, first_data_acqrd, first_data_acqrd, first_data_acqrd, first_data_acqrd, first_data_acqrd, first_data_acqrd, first_data_acqrd, first_data_acqrd, first_data_acqrd, first_data_acqrd }, { _046_, _043_, _041_, _038_, _036_, _013_, _010_, _003_, _184_, _174_, _149_, _138_, _129_, _125_, _121_, _119_, _117_, _114_, _112_, _105_, _099_, _067_, _034_ });
  function [0:0] \342 ;
    input [0:0] a;
    input [22:0] b;
    input [22:0] s;
    (* parallel_case *)
    casez (s)
      23'b??????????????????????1:
        \342  = b[0:0];
      23'b?????????????????????1?:
        \342  = b[1:1];
      23'b????????????????????1??:
        \342  = b[2:2];
      23'b???????????????????1???:
        \342  = b[3:3];
      23'b??????????????????1????:
        \342  = b[4:4];
      23'b?????????????????1?????:
        \342  = b[5:5];
      23'b????????????????1??????:
        \342  = b[6:6];
      23'b???????????????1???????:
        \342  = b[7:7];
      23'b??????????????1????????:
        \342  = b[8:8];
      23'b?????????????1?????????:
        \342  = b[9:9];
      23'b????????????1??????????:
        \342  = b[10:10];
      23'b???????????1???????????:
        \342  = b[11:11];
      23'b??????????1????????????:
        \342  = b[12:12];
      23'b?????????1?????????????:
        \342  = b[13:13];
      23'b????????1??????????????:
        \342  = b[14:14];
      23'b???????1???????????????:
        \342  = b[15:15];
      23'b??????1????????????????:
        \342  = b[16:16];
      23'b?????1?????????????????:
        \342  = b[17:17];
      23'b????1??????????????????:
        \342  = b[18:18];
      23'b???1???????????????????:
        \342  = b[19:19];
      23'b??1????????????????????:
        \342  = b[20:20];
      23'b?1?????????????????????:
        \342  = b[21:21];
      23'b1??????????????????????:
        \342  = b[22:22];
      default:
        \342  = a;
    endcase
  endfunction
  assign _049_ = \342 (1'hx, { reg_component_mode, reg_component_mode, reg_component_mode, reg_component_mode, reg_component_mode, reg_component_mode, reg_component_mode, reg_component_mode, reg_component_mode, reg_component_mode, reg_component_mode, reg_component_mode, reg_component_mode, reg_component_mode, reg_component_mode, reg_component_mode, reg_component_mode, reg_component_mode, reg_component_mode, reg_component_mode, reg_component_mode, reg_component_mode, _012_ }, { _046_, _043_, _041_, _038_, _036_, _013_, _010_, _003_, _184_, _174_, _149_, _138_, _129_, _125_, _121_, _119_, _117_, _114_, _112_, _105_, _099_, _067_, _034_ });
  function [0:0] \344 ;
    input [0:0] a;
    input [22:0] b;
    input [22:0] s;
    (* parallel_case *)
    casez (s)
      23'b??????????????????????1:
        \344  = b[0:0];
      23'b?????????????????????1?:
        \344  = b[1:1];
      23'b????????????????????1??:
        \344  = b[2:2];
      23'b???????????????????1???:
        \344  = b[3:3];
      23'b??????????????????1????:
        \344  = b[4:4];
      23'b?????????????????1?????:
        \344  = b[5:5];
      23'b????????????????1??????:
        \344  = b[6:6];
      23'b???????????????1???????:
        \344  = b[7:7];
      23'b??????????????1????????:
        \344  = b[8:8];
      23'b?????????????1?????????:
        \344  = b[9:9];
      23'b????????????1??????????:
        \344  = b[10:10];
      23'b???????????1???????????:
        \344  = b[11:11];
      23'b??????????1????????????:
        \344  = b[12:12];
      23'b?????????1?????????????:
        \344  = b[13:13];
      23'b????????1??????????????:
        \344  = b[14:14];
      23'b???????1???????????????:
        \344  = b[15:15];
      23'b??????1????????????????:
        \344  = b[16:16];
      23'b?????1?????????????????:
        \344  = b[17:17];
      23'b????1??????????????????:
        \344  = b[18:18];
      23'b???1???????????????????:
        \344  = b[19:19];
      23'b??1????????????????????:
        \344  = b[20:20];
      23'b?1?????????????????????:
        \344  = b[21:21];
      23'b1??????????????????????:
        \344  = b[22:22];
      default:
        \344  = a;
    endcase
  endfunction
  assign _050_ = \344 (1'hx, { m_write_e, m_write_e, m_write_e, m_write_e, _033_, m_write_e, m_write_e, m_write_e, m_write_e, m_write_e, m_write_e, m_write_e, m_write_e, m_write_e, m_write_e, m_write_e, m_write_e, m_write_e, m_write_e, m_write_e, m_write_e, m_write_e, m_write_e }, { _046_, _043_, _041_, _038_, _036_, _013_, _010_, _003_, _184_, _174_, _149_, _138_, _129_, _125_, _121_, _119_, _117_, _114_, _112_, _105_, _099_, _067_, _034_ });
  function [7:0] \346 ;
    input [7:0] a;
    input [183:0] b;
    input [22:0] s;
    (* parallel_case *)
    casez (s)
      23'b??????????????????????1:
        \346  = b[7:0];
      23'b?????????????????????1?:
        \346  = b[15:8];
      23'b????????????????????1??:
        \346  = b[23:16];
      23'b???????????????????1???:
        \346  = b[31:24];
      23'b??????????????????1????:
        \346  = b[39:32];
      23'b?????????????????1?????:
        \346  = b[47:40];
      23'b????????????????1??????:
        \346  = b[55:48];
      23'b???????????????1???????:
        \346  = b[63:56];
      23'b??????????????1????????:
        \346  = b[71:64];
      23'b?????????????1?????????:
        \346  = b[79:72];
      23'b????????????1??????????:
        \346  = b[87:80];
      23'b???????????1???????????:
        \346  = b[95:88];
      23'b??????????1????????????:
        \346  = b[103:96];
      23'b?????????1?????????????:
        \346  = b[111:104];
      23'b????????1??????????????:
        \346  = b[119:112];
      23'b???????1???????????????:
        \346  = b[127:120];
      23'b??????1????????????????:
        \346  = b[135:128];
      23'b?????1?????????????????:
        \346  = b[143:136];
      23'b????1??????????????????:
        \346  = b[151:144];
      23'b???1???????????????????:
        \346  = b[159:152];
      23'b??1????????????????????:
        \346  = b[167:160];
      23'b?1?????????????????????:
        \346  = b[175:168];
      23'b1??????????????????????:
        \346  = b[183:176];
      default:
        \346  = a;
    endcase
  endfunction
  assign _051_ = \346 (8'hxx, { m_address, m_address, m_address, m_address, _027_, m_address, m_address, m_address, m_address, m_address, m_address, m_address, m_address, m_address, m_address, m_address, m_address, m_address, m_address, m_address, m_address, m_address, m_address }, { _046_, _043_, _041_, _038_, _036_, _013_, _010_, _003_, _184_, _174_, _149_, _138_, _129_, _125_, _121_, _119_, _117_, _114_, _112_, _105_, _099_, _067_, _034_ });
  function [2:0] \360 ;
    input [2:0] a;
    input [68:0] b;
    input [22:0] s;
    (* parallel_case *)
    casez (s)
      23'b??????????????????????1:
        \360  = b[2:0];
      23'b?????????????????????1?:
        \360  = b[5:3];
      23'b????????????????????1??:
        \360  = b[8:6];
      23'b???????????????????1???:
        \360  = b[11:9];
      23'b??????????????????1????:
        \360  = b[14:12];
      23'b?????????????????1?????:
        \360  = b[17:15];
      23'b????????????????1??????:
        \360  = b[20:18];
      23'b???????????????1???????:
        \360  = b[23:21];
      23'b??????????????1????????:
        \360  = b[26:24];
      23'b?????????????1?????????:
        \360  = b[29:27];
      23'b????????????1??????????:
        \360  = b[32:30];
      23'b???????????1???????????:
        \360  = b[35:33];
      23'b??????????1????????????:
        \360  = b[38:36];
      23'b?????????1?????????????:
        \360  = b[41:39];
      23'b????????1??????????????:
        \360  = b[44:42];
      23'b???????1???????????????:
        \360  = b[47:45];
      23'b??????1????????????????:
        \360  = b[50:48];
      23'b?????1?????????????????:
        \360  = b[53:51];
      23'b????1??????????????????:
        \360  = b[56:54];
      23'b???1???????????????????:
        \360  = b[59:57];
      23'b??1????????????????????:
        \360  = b[62:60];
      23'b?1?????????????????????:
        \360  = b[65:63];
      23'b1??????????????????????:
        \360  = b[68:66];
      default:
        \360  = a;
    endcase
  endfunction
  assign _052_ = \360 (3'hx, { wb_adr_i, wb_adr_i, 3'h4, wb_adr_i, 9'h0db, wb_adr_i, 3'h4, wb_adr_i, _143_, 3'h3, wb_adr_i, 3'h3, wb_adr_i, wb_adr_i, 3'h4, wb_adr_i, 12'h888, wb_adr_i }, { _046_, _043_, _041_, _038_, _036_, _013_, _010_, _003_, _184_, _174_, _149_, _138_, _129_, _125_, _121_, _119_, _117_, _114_, _112_, _105_, _099_, _067_, _034_ });
  function [7:0] \366 ;
    input [7:0] a;
    input [183:0] b;
    input [22:0] s;
    (* parallel_case *)
    casez (s)
      23'b??????????????????????1:
        \366  = b[7:0];
      23'b?????????????????????1?:
        \366  = b[15:8];
      23'b????????????????????1??:
        \366  = b[23:16];
      23'b???????????????????1???:
        \366  = b[31:24];
      23'b??????????????????1????:
        \366  = b[39:32];
      23'b?????????????????1?????:
        \366  = b[47:40];
      23'b????????????????1??????:
        \366  = b[55:48];
      23'b???????????????1???????:
        \366  = b[63:56];
      23'b??????????????1????????:
        \366  = b[71:64];
      23'b?????????????1?????????:
        \366  = b[79:72];
      23'b????????????1??????????:
        \366  = b[87:80];
      23'b???????????1???????????:
        \366  = b[95:88];
      23'b??????????1????????????:
        \366  = b[103:96];
      23'b?????????1?????????????:
        \366  = b[111:104];
      23'b????????1??????????????:
        \366  = b[119:112];
      23'b???????1???????????????:
        \366  = b[127:120];
      23'b??????1????????????????:
        \366  = b[135:128];
      23'b?????1?????????????????:
        \366  = b[143:136];
      23'b????1??????????????????:
        \366  = b[151:144];
      23'b???1???????????????????:
        \366  = b[159:152];
      23'b??1????????????????????:
        \366  = b[167:160];
      23'b?1?????????????????????:
        \366  = b[175:168];
      23'b1??????????????????????:
        \366  = b[183:176];
      default:
        \366  = a;
    endcase
  endfunction
  assign _053_ = \366 (8'hxx, { wb_dat_i, wb_dat_i, 8'h40, wb_dat_i, wb_dat_i, wb_dat_i, wb_dat_i, wb_dat_i, 8'h20, wb_dat_i, _145_, _135_, wb_dat_i, i2c_target_addr, i2c_read_e, wb_dat_i, wb_dat_i, 8'h90, wb_dat_i, wb_dat_i, 8'h80, preescaler_aux, wb_dat_i }, { _046_, _043_, _041_, _038_, _036_, _013_, _010_, _003_, _184_, _174_, _149_, _138_, _129_, _125_, _121_, _119_, _117_, _114_, _112_, _105_, _099_, _067_, _034_ });
  function [0:0] \368 ;
    input [0:0] a;
    input [22:0] b;
    input [22:0] s;
    (* parallel_case *)
    casez (s)
      23'b??????????????????????1:
        \368  = b[0:0];
      23'b?????????????????????1?:
        \368  = b[1:1];
      23'b????????????????????1??:
        \368  = b[2:2];
      23'b???????????????????1???:
        \368  = b[3:3];
      23'b??????????????????1????:
        \368  = b[4:4];
      23'b?????????????????1?????:
        \368  = b[5:5];
      23'b????????????????1??????:
        \368  = b[6:6];
      23'b???????????????1???????:
        \368  = b[7:7];
      23'b??????????????1????????:
        \368  = b[8:8];
      23'b?????????????1?????????:
        \368  = b[9:9];
      23'b????????????1??????????:
        \368  = b[10:10];
      23'b???????????1???????????:
        \368  = b[11:11];
      23'b??????????1????????????:
        \368  = b[12:12];
      23'b?????????1?????????????:
        \368  = b[13:13];
      23'b????????1??????????????:
        \368  = b[14:14];
      23'b???????1???????????????:
        \368  = b[15:15];
      23'b??????1????????????????:
        \368  = b[16:16];
      23'b?????1?????????????????:
        \368  = b[17:17];
      23'b????1??????????????????:
        \368  = b[18:18];
      23'b???1???????????????????:
        \368  = b[19:19];
      23'b??1????????????????????:
        \368  = b[20:20];
      23'b?1?????????????????????:
        \368  = b[21:21];
      23'b1??????????????????????:
        \368  = b[22:22];
      default:
        \368  = a;
    endcase
  endfunction
  assign _054_ = \368 (1'hx, { wb_we_i, wb_we_i, _039_, wb_we_i, wb_we_i, wb_we_i, wb_we_i, wb_we_i, _182_, wb_we_i, _146_, _136_, wb_we_i, _123_, wb_we_i, wb_we_i, _115_, wb_we_i, wb_we_i, _103_, _078_, _045_, wb_we_i }, { _046_, _043_, _041_, _038_, _036_, _013_, _010_, _003_, _184_, _174_, _149_, _138_, _129_, _125_, _121_, _119_, _117_, _114_, _112_, _105_, _099_, _067_, _034_ });
  function [31:0] \370 ;
    input [31:0] a;
    input [735:0] b;
    input [22:0] s;
    (* parallel_case *)
    casez (s)
      23'b??????????????????????1:
        \370  = b[31:0];
      23'b?????????????????????1?:
        \370  = b[63:32];
      23'b????????????????????1??:
        \370  = b[95:64];
      23'b???????????????????1???:
        \370  = b[127:96];
      23'b??????????????????1????:
        \370  = b[159:128];
      23'b?????????????????1?????:
        \370  = b[191:160];
      23'b????????????????1??????:
        \370  = b[223:192];
      23'b???????????????1???????:
        \370  = b[255:224];
      23'b??????????????1????????:
        \370  = b[287:256];
      23'b?????????????1?????????:
        \370  = b[319:288];
      23'b????????????1??????????:
        \370  = b[351:320];
      23'b???????????1???????????:
        \370  = b[383:352];
      23'b??????????1????????????:
        \370  = b[415:384];
      23'b?????????1?????????????:
        \370  = b[447:416];
      23'b????????1??????????????:
        \370  = b[479:448];
      23'b???????1???????????????:
        \370  = b[511:480];
      23'b??????1????????????????:
        \370  = b[543:512];
      23'b?????1?????????????????:
        \370  = b[575:544];
      23'b????1??????????????????:
        \370  = b[607:576];
      23'b???1???????????????????:
        \370  = b[639:608];
      23'b??1????????????????????:
        \370  = b[671:640];
      23'b?1?????????????????????:
        \370  = b[703:672];
      23'b1??????????????????????:
        \370  = b[735:704];
      default:
        \370  = a;
    endcase
  endfunction
  assign _055_ = \370 (32'hxxxxxxxx, { counter, counter, counter, counter, counter, counter, counter, _186_, counter, _169_, _147_, counter, _126_, counter, counter, counter, counter, counter, counter, counter, counter, counter, counter }, { _046_, _043_, _041_, _038_, _036_, _013_, _010_, _003_, _184_, _174_, _149_, _138_, _129_, _125_, _121_, _119_, _117_, _114_, _112_, _105_, _099_, _067_, _034_ });
  function [39:0] \372 ;
    input [39:0] a;
    input [919:0] b;
    input [22:0] s;
    (* parallel_case *)
    casez (s)
      23'b??????????????????????1:
        \372  = b[39:0];
      23'b?????????????????????1?:
        \372  = b[79:40];
      23'b????????????????????1??:
        \372  = b[119:80];
      23'b???????????????????1???:
        \372  = b[159:120];
      23'b??????????????????1????:
        \372  = b[199:160];
      23'b?????????????????1?????:
        \372  = b[239:200];
      23'b????????????????1??????:
        \372  = b[279:240];
      23'b???????????????1???????:
        \372  = b[319:280];
      23'b??????????????1????????:
        \372  = b[359:320];
      23'b?????????????1?????????:
        \372  = b[399:360];
      23'b????????????1??????????:
        \372  = b[439:400];
      23'b???????????1???????????:
        \372  = b[479:440];
      23'b??????????1????????????:
        \372  = b[519:480];
      23'b?????????1?????????????:
        \372  = b[559:520];
      23'b????????1??????????????:
        \372  = b[599:560];
      23'b???????1???????????????:
        \372  = b[639:600];
      23'b??????1????????????????:
        \372  = b[679:640];
      23'b?????1?????????????????:
        \372  = b[719:680];
      23'b????1??????????????????:
        \372  = b[759:720];
      23'b???1???????????????????:
        \372  = b[799:760];
      23'b??1????????????????????:
        \372  = b[839:800];
      23'b?1?????????????????????:
        \372  = b[879:840];
      23'b1??????????????????????:
        \372  = b[919:880];
      default:
        \372  = a;
    endcase
  endfunction
  assign _057_ = \372 (40'hxxxxxxxxxx, { data_vector_s, data_vector_s, data_vector_s, data_vector_s, data_vector_s, data_vector_s, data_vector_s, data_vector_s, data_vector_s, _170_, data_vector_s, data_vector_s, data_vector_s, data_vector_s, data_vector_s, data_vector_s, data_vector_s, data_vector_s, data_vector_s, data_vector_s, data_vector_s, data_vector_s, data_vector_s }, { _046_, _043_, _041_, _038_, _036_, _013_, _010_, _003_, _184_, _174_, _149_, _138_, _129_, _125_, _121_, _119_, _117_, _114_, _112_, _105_, _099_, _067_, _034_ });
  function [39:0] \374 ;
    input [39:0] a;
    input [919:0] b;
    input [22:0] s;
    (* parallel_case *)
    casez (s)
      23'b??????????????????????1:
        \374  = b[39:0];
      23'b?????????????????????1?:
        \374  = b[79:40];
      23'b????????????????????1??:
        \374  = b[119:80];
      23'b???????????????????1???:
        \374  = b[159:120];
      23'b??????????????????1????:
        \374  = b[199:160];
      23'b?????????????????1?????:
        \374  = b[239:200];
      23'b????????????????1??????:
        \374  = b[279:240];
      23'b???????????????1???????:
        \374  = b[319:280];
      23'b??????????????1????????:
        \374  = b[359:320];
      23'b?????????????1?????????:
        \374  = b[399:360];
      23'b????????????1??????????:
        \374  = b[439:400];
      23'b???????????1???????????:
        \374  = b[479:440];
      23'b??????????1????????????:
        \374  = b[519:480];
      23'b?????????1?????????????:
        \374  = b[559:520];
      23'b????????1??????????????:
        \374  = b[599:560];
      23'b???????1???????????????:
        \374  = b[639:600];
      23'b??????1????????????????:
        \374  = b[679:640];
      23'b?????1?????????????????:
        \374  = b[719:680];
      23'b????1??????????????????:
        \374  = b[759:720];
      23'b???1???????????????????:
        \374  = b[799:760];
      23'b??1????????????????????:
        \374  = b[839:800];
      23'b?1?????????????????????:
        \374  = b[879:840];
      23'b1??????????????????????:
        \374  = b[919:880];
      default:
        \374  = a;
    endcase
  endfunction
  assign _058_ = \374 (40'hxxxxxxxxxx, { req_reg_vector_s, req_reg_vector_s, req_reg_vector_s, req_reg_vector_s, req_reg_vector_s, req_reg_vector_s, req_reg_vector_s, req_reg_vector_s, req_reg_vector_s, _171_, req_reg_vector_s, req_reg_vector_s, req_reg_vector_s, req_reg_vector_s, req_reg_vector_s, req_reg_vector_s, req_reg_vector_s, req_reg_vector_s, req_reg_vector_s, req_reg_vector_s, req_reg_vector_s, req_reg_vector_s, req_reg_vector_s }, { _046_, _043_, _041_, _038_, _036_, _013_, _010_, _003_, _184_, _174_, _149_, _138_, _129_, _125_, _121_, _119_, _117_, _114_, _112_, _105_, _099_, _067_, _034_ });
  function [4:0] \378 ;
    input [4:0] a;
    input [114:0] b;
    input [22:0] s;
    (* parallel_case *)
    casez (s)
      23'b??????????????????????1:
        \378  = b[4:0];
      23'b?????????????????????1?:
        \378  = b[9:5];
      23'b????????????????????1??:
        \378  = b[14:10];
      23'b???????????????????1???:
        \378  = b[19:15];
      23'b??????????????????1????:
        \378  = b[24:20];
      23'b?????????????????1?????:
        \378  = b[29:25];
      23'b????????????????1??????:
        \378  = b[34:30];
      23'b???????????????1???????:
        \378  = b[39:35];
      23'b??????????????1????????:
        \378  = b[44:40];
      23'b?????????????1?????????:
        \378  = b[49:45];
      23'b????????????1??????????:
        \378  = b[54:50];
      23'b???????????1???????????:
        \378  = b[59:55];
      23'b??????????1????????????:
        \378  = b[64:60];
      23'b?????????1?????????????:
        \378  = b[69:65];
      23'b????????1??????????????:
        \378  = b[74:70];
      23'b???????1???????????????:
        \378  = b[79:75];
      23'b??????1????????????????:
        \378  = b[84:80];
      23'b?????1?????????????????:
        \378  = b[89:85];
      23'b????1??????????????????:
        \378  = b[94:90];
      23'b???1???????????????????:
        \378  = b[99:95];
      23'b??1????????????????????:
        \378  = b[104:100];
      23'b?1?????????????????????:
        \378  = b[109:105];
      23'b1??????????????????????:
        \378  = b[114:110];
      default:
        \378  = a;
    endcase
  endfunction
  assign _059_ = \378 (5'hxx, { _044_, _042_, _040_, _037_, _035_, _011_, _009_, _002_, _183_, _172_, _148_, _137_, _127_, _124_, _120_, _118_, _116_, _113_, _110_, _104_, _089_, _056_, _023_ }, { _046_, _043_, _041_, _038_, _036_, _013_, _010_, _003_, _184_, _174_, _149_, _138_, _129_, _125_, _121_, _119_, _117_, _114_, _112_, _105_, _099_, _067_, _034_ });
  function [4:0] \380 ;
    input [4:0] a;
    input [114:0] b;
    input [22:0] s;
    (* parallel_case *)
    casez (s)
      23'b??????????????????????1:
        \380  = b[4:0];
      23'b?????????????????????1?:
        \380  = b[9:5];
      23'b????????????????????1??:
        \380  = b[14:10];
      23'b???????????????????1???:
        \380  = b[19:15];
      23'b??????????????????1????:
        \380  = b[24:20];
      23'b?????????????????1?????:
        \380  = b[29:25];
      23'b????????????????1??????:
        \380  = b[34:30];
      23'b???????????????1???????:
        \380  = b[39:35];
      23'b??????????????1????????:
        \380  = b[44:40];
      23'b?????????????1?????????:
        \380  = b[49:45];
      23'b????????????1??????????:
        \380  = b[54:50];
      23'b???????????1???????????:
        \380  = b[59:55];
      23'b??????????1????????????:
        \380  = b[64:60];
      23'b?????????1?????????????:
        \380  = b[69:65];
      23'b????????1??????????????:
        \380  = b[74:70];
      23'b???????1???????????????:
        \380  = b[79:75];
      23'b??????1????????????????:
        \380  = b[84:80];
      23'b?????1?????????????????:
        \380  = b[89:85];
      23'b????1??????????????????:
        \380  = b[94:90];
      23'b???1???????????????????:
        \380  = b[99:95];
      23'b??1????????????????????:
        \380  = b[104:100];
      23'b?1?????????????????????:
        \380  = b[109:105];
      23'b1??????????????????????:
        \380  = b[114:110];
      default:
        \380  = a;
    endcase
  endfunction
  assign _060_ = \380 (5'hxx, { \statemachine.callback_state , \statemachine.callback_state , \statemachine.callback_state , \statemachine.callback_state , \statemachine.callback_state , \statemachine.callback_state , \statemachine.callback_state , \statemachine.callback_state , \statemachine.callback_state , _173_, \statemachine.callback_state , \statemachine.callback_state , _128_, \statemachine.callback_state , \statemachine.callback_state , \statemachine.callback_state , \statemachine.callback_state , \statemachine.callback_state , \statemachine.callback_state , \statemachine.callback_state , \statemachine.callback_state , \statemachine.callback_state , \statemachine.callback_state  }, { _046_, _043_, _041_, _038_, _036_, _013_, _010_, _003_, _184_, _174_, _149_, _138_, _129_, _125_, _121_, _119_, _117_, _114_, _112_, _105_, _099_, _067_, _034_ });
  always @(posedge p_clock, posedge _001_)
    if (_001_) _061_ <= 5'h00;
    else _061_ <= _059_;
  assign _062_ = ~ _001_;
  assign _063_ = _062_ ? _060_ : \statemachine.callback_state ;
  always @(posedge p_clock)
    _064_ <= _063_;
  assign _065_ = ~ scl_padoen_o;
  assign _066_ = ~ sda_padoen_o;
  assign _068_ = ~ _001_;
  assign _069_ = _068_ ? _047_ : first_data;
  always @(posedge p_clock)
    _070_ <= _069_;
  assign _071_ = ~ _001_;
  assign _072_ = _071_ ? _048_ : first_data_acqrd;
  always @(posedge p_clock)
    _073_ <= _072_;
  always @(posedge p_clock, posedge _001_)
    if (_001_) _074_ <= 1'h0;
    else _074_ <= _049_;
  assign _075_ = ~ _001_;
  assign _076_ = _075_ ? _050_ : m_write_e;
  always @(posedge p_clock)
    _077_ <= _076_;
  assign _079_ = ~ _001_;
  assign _080_ = _079_ ? _051_ : m_address;
  always @(posedge p_clock)
    _081_ <= _080_;
  assign _082_ = ~ _001_;
  assign _083_ = _082_ ? _052_ : wb_adr_i;
  always @(posedge p_clock)
    _084_ <= _083_;
  assign _085_ = ~ _001_;
  assign _086_ = _085_ ? _053_ : wb_dat_i;
  always @(posedge p_clock)
    _087_ <= _086_;
  assign _088_ = ~ _001_;
  assign _090_ = _088_ ? _054_ : wb_we_i;
  always @(posedge p_clock)
    _091_ <= _090_;
  assign _092_ = ~ _001_;
  assign _093_ = _092_ ? _055_ : counter;
  always @(posedge p_clock)
    _094_ <= _093_;
  always @(posedge p_clock, posedge _001_)
    if (_001_) _095_ <= 40'h48656c6c6f;
    else _095_ <= _057_;
  always @(posedge p_clock, posedge _001_)
    if (_001_) _096_ <= 40'h0706050403;
    else _096_ <= _058_;
  assign _097_ = _065_ ? scl_pad_o : 1'bz;
  assign _098_ = _066_ ? sda_pad_o : 1'bz;
  assign _001_ = ~ p_reset;
  assign _012_ = wb_ack_o ? component_mode : reg_component_mode;
  assign _023_ = wb_ack_o ? 5'h01 : 5'h00;
  assign _034_ = \statemachine.c_state  == 5'h00;
  assign _045_ = wb_ack_o ? 1'h0 : 1'h1;
  assign _056_ = wb_ack_o ? 5'h02 : 5'h01;
  assign _067_ = \statemachine.c_state  == 5'h01;
  assign _078_ = wb_ack_o ? 1'h0 : 1'h1;
  assign _089_ = wb_ack_o ? 5'h03 : 5'h02;
  assign _099_ = \statemachine.c_state  == 5'h02;
  assign _101_ = ~ reg_component_mode;
  assign _102_ = _101_ ? 5'h04 : 5'h0e;
  assign _103_ = wb_ack_o ? 1'h0 : 1'h1;
  assign _104_ = wb_ack_o ? _102_ : 5'h03;
  assign _105_ = \statemachine.c_state  == 5'h03;
  assign _106_ = wb_ack_o & wb_data_i[6];
  assign _107_ = reg_component_mode & _106_;
  assign _108_ = ~ reg_component_mode;
  assign _109_ = _108_ ? 5'h04 : 5'h0e;
  assign _110_ = _107_ ? 5'h10 : _109_;
  i2c_master_top_c4ea21bb365bbeeaf5f2c654883e56d11e43c44e i2c_master (
    .arst_i(p_reset),
    .i2c_addr_i(i2c_addr_i),
    .sc_done_o(_100_),
    .scl_pad_i(scl_pad_i),
    .scl_pad_o(_144_),
    .scl_padoen_o(_155_),
    .sda_pad_i(sda_pad_i),
    .sda_pad_o(_166_),
    .sda_padoen_o(_177_),
    .wb_ack_o(_122_),
    .wb_adr_i(wb_adr_i),
    .wb_clk_i(p_clock),
    .wb_cyc_i(wb_cyc_i),
    .wb_dat_i(wb_dat_i),
    .wb_dat_o(_111_),
    .wb_inta_o(_133_),
    .wb_rst_i(wb_rst_i),
    .wb_stb_i(wb_stb_i),
    .wb_we_i(wb_we_i)
  );
  memory_dump_serial memory (
    .m_address(m_address),
    .m_clock(p_clock),
    .m_data_dump(_000_),
    .m_datain(wb_data_i),
    .m_reset(p_reset),
    .m_start_dump(m_start_dump),
    .m_write_e(m_write_e)
  );
  assign SCL = _097_;
  assign SDA = _098_;
  assign preescaler_aux = 16'h0063;
  assign sc_done_o = \i2c_master:21 ;
  assign first_data = _070_;
  assign first_data_acqrd = _073_;
  assign reg_component_mode = _074_;
  assign m_write_e = _077_;
  assign m_address = _081_;
  assign wb_rst_i = 1'h0;
  assign wb_adr_i = _084_;
  assign wb_dat_i = _087_;
  assign wb_we_i = _091_;
  assign wb_stb_i = 1'h1;
  assign wb_cyc_i = 1'h1;
  assign wb_ack_o = \i2c_master:23 ;
  assign wb_data_i = \i2c_master:22 ;
  assign scl_pad_i = SCL;
  assign scl_pad_o = \i2c_master:25 ;
  assign scl_padoen_o = \i2c_master:26 ;
  assign sda_pad_i = SDA;
  assign sda_pad_o = \i2c_master:27 ;
  assign sda_padoen_o = \i2c_master:28 ;
  assign counter = _094_;
  assign data_vector_s = _095_;
  assign req_reg_vector_s = _096_;
  assign i2c_target_addr = 7'h66;
  assign \memory:18  = _000_;
  assign \i2c_master:21  = _100_;
  assign \i2c_master:22  = _111_;
  assign \i2c_master:23  = _122_;
  assign \i2c_master:25  = _144_;
  assign \i2c_master:26  = _155_;
  assign \i2c_master:27  = _166_;
  assign \i2c_master:28  = _177_;
  assign \statemachine.c_state  = _061_;
  assign \statemachine.callback_state  = _064_;
  assign m_data_dump = \memory:18 ;
endmodule

module i2c_master_bit_ctrl(clk, rst, nreset, ena, clk_cnt, cmd, din, scl_i, sda_i, cmd_ack, busy, al, dout, scl_o, scl_oen, sda_o, sda_oen);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire [15:0] _018_;
  wire [15:0] _019_;
  wire _020_;
  wire [15:0] _021_;
  wire _022_;
  wire [1:0] _023_;
  wire [1:0] _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire [13:0] _029_;
  wire [13:0] _030_;
  wire [13:0] _031_;
  wire _032_;
  wire _033_;
  wire [2:0] _034_;
  wire [2:0] _035_;
  wire [2:0] _036_;
  wire [2:0] _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  reg [1:0] _087_;
  reg [1:0] _088_;
  reg [2:0] _089_;
  reg [2:0] _090_;
  reg [13:0] _091_;
  reg _092_;
  reg _093_;
  reg _094_;
  reg _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire [4:0] _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire [4:0] _124_;
  wire _125_;
  wire _126_;
  wire _127_;
  wire _128_;
  wire _129_;
  wire _130_;
  wire [4:0] _131_;
  wire _132_;
  wire _133_;
  wire _134_;
  wire _135_;
  wire _136_;
  wire _137_;
  wire [4:0] _138_;
  wire _139_;
  wire _140_;
  wire _141_;
  reg [4:0] _142_;
  reg _143_;
  reg _144_;
  reg _145_;
  reg _146_;
  reg _147_;
  reg _148_;
  reg _149_;
  reg _150_;
  reg _151_;
  reg _152_;
  reg _153_;
  reg [15:0] _154_;
  reg _155_;
  wire _156_;
  reg _157_;
  wire _158_;
  wire _159_;
  reg _160_;
  wire _161_;
  wire _162_;
  reg _163_;
  output al;
  wire al;
  wire \bus_status_ctrl.cmd_stop ;
  wire [1:0] \bus_status_ctrl.cscl ;
  wire [1:0] \bus_status_ctrl.csda ;
  wire [13:0] \bus_status_ctrl.filter_cnt ;
  wire [2:0] \bus_status_ctrl.fscl ;
  wire [2:0] \bus_status_ctrl.fsda ;
  wire \bus_status_ctrl.ibusy ;
  wire \bus_status_ctrl.sta_condition ;
  wire \bus_status_ctrl.sto_condition ;
  output busy;
  wire busy;
  wire [4:0] c_state;
  input clk;
  wire clk;
  input [15:0] clk_cnt;
  wire [15:0] clk_cnt;
  wire clk_en;
  input [3:0] cmd;
  wire [3:0] cmd;
  output cmd_ack;
  wire cmd_ack;
  wire [15:0] cnt;
  input din;
  wire din;
  output dout;
  wire dout;
  wire dscl;
  wire dscl_oen;
  wire dsda;
  input ena;
  wire ena;
  wire ial;
  wire iscl_oen;
  wire isda_oen;
  input nreset;
  wire nreset;
  input rst;
  wire rst;
  input scl_i;
  wire scl_i;
  output scl_o;
  wire scl_o;
  output scl_oen;
  wire scl_oen;
  wire scl_sync;
  wire sda_chk;
  input sda_i;
  wire sda_i;
  output sda_o;
  wire sda_o;
  output sda_oen;
  wire sda_oen;
  wire slave_wait;
  wire sscl;
  wire ssda;
  assign _000_ = ~ nreset;
  assign _001_ = ~ nreset;
  assign _002_ = ~ dscl_oen;
  assign _003_ = iscl_oen & _002_;
  assign _004_ = ~ sscl;
  assign _005_ = _003_ & _004_;
  assign _006_ = ~ sscl;
  assign _007_ = slave_wait & _006_;
  assign _008_ = _005_ | _007_;
  assign _009_ = ~ sscl;
  assign _010_ = dscl & _009_;
  assign _011_ = _010_ & iscl_oen;
  assign _012_ = ~ nreset;
  assign _013_ = cnt == 16'h0000;
  assign _014_ = rst | _013_;
  assign _015_ = ~ ena;
  assign _016_ = _014_ | _015_;
  assign _017_ = _016_ | scl_sync;
  assign _018_ = cnt - 16'h0001;
  assign _019_ = slave_wait ? cnt : _018_;
  assign _020_ = _017_ ? 1'h1 : 1'h0;
  assign _021_ = _017_ ? clk_cnt : _019_;
  assign _022_ = ~ nreset;
  assign _023_ = rst ? 2'h0 : { \bus_status_ctrl.cscl [0], scl_i };
  assign _024_ = rst ? 2'h0 : { \bus_status_ctrl.csda [0], sda_i };
  assign _025_ = ~ nreset;
  assign _026_ = ~ ena;
  assign _027_ = rst | _026_;
  assign _028_ = \bus_status_ctrl.filter_cnt  == 14'h0000;
  assign _029_ = \bus_status_ctrl.filter_cnt  - 14'h0001;
  assign _030_ = _028_ ? clk_cnt[15:2] : _029_;
  assign _031_ = _027_ ? 14'h0000 : _030_;
  assign _032_ = ~ nreset;
  assign _033_ = \bus_status_ctrl.filter_cnt  == 14'h0000;
  assign _034_ = _033_ ? { \bus_status_ctrl.fscl [1:0], \bus_status_ctrl.cscl [1] } : \bus_status_ctrl.fscl ;
  assign _035_ = _033_ ? { \bus_status_ctrl.fsda [1:0], \bus_status_ctrl.csda [1] } : \bus_status_ctrl.fsda ;
  assign _036_ = rst ? 3'h7 : _034_;
  assign _037_ = rst ? 3'h7 : _035_;
  assign _038_ = ~ nreset;
  assign _039_ = \bus_status_ctrl.fscl [2] & \bus_status_ctrl.fscl [1];
  assign _040_ = \bus_status_ctrl.fscl [2] & \bus_status_ctrl.fscl [0];
  assign _041_ = _039_ | _040_;
  assign _042_ = \bus_status_ctrl.fscl [1] & \bus_status_ctrl.fscl [0];
  assign _043_ = _041_ | _042_;
  assign _044_ = \bus_status_ctrl.fsda [2] & \bus_status_ctrl.fsda [1];
  assign _045_ = \bus_status_ctrl.fsda [2] & \bus_status_ctrl.fsda [0];
  assign _046_ = _044_ | _045_;
  assign _047_ = \bus_status_ctrl.fsda [1] & \bus_status_ctrl.fsda [0];
  assign _048_ = _046_ | _047_;
  assign _049_ = rst ? 1'h1 : _043_;
  assign _050_ = rst ? 1'h1 : _048_;
  assign _051_ = rst ? 1'h1 : sscl;
  assign _052_ = rst ? 1'h1 : ssda;
  assign _053_ = ~ nreset;
  assign _054_ = ~ ssda;
  assign _055_ = _054_ & dsda;
  assign _056_ = _055_ & sscl;
  assign _057_ = ~ dsda;
  assign _058_ = ssda & _057_;
  assign _059_ = _058_ & sscl;
  assign _060_ = rst ? 1'h0 : _056_;
  assign _061_ = rst ? 1'h0 : _059_;
  assign _062_ = ~ nreset;
  assign _063_ = \bus_status_ctrl.sta_condition  | \bus_status_ctrl.ibusy ;
  assign _064_ = ~ \bus_status_ctrl.sto_condition ;
  assign _065_ = _063_ & _064_;
  assign _066_ = rst ? 1'h0 : _065_;
  assign _067_ = ~ nreset;
  assign _068_ = cmd == 4'h2;
  assign _069_ = _068_ ? 1'h1 : 1'h0;
  assign _070_ = clk_en ? _069_ : \bus_status_ctrl.cmd_stop ;
  assign _071_ = c_state == 5'h00;
  assign _072_ = ~ ssda;
  assign _073_ = sda_chk & _072_;
  assign _074_ = _073_ & isda_oen;
  assign _075_ = ~ \bus_status_ctrl.cmd_stop ;
  assign _076_ = \bus_status_ctrl.sto_condition  & _075_;
  assign _077_ = _074_ | _076_;
  assign _078_ = ~ ssda;
  assign _079_ = sda_chk & _078_;
  assign _080_ = _079_ & isda_oen;
  assign _081_ = _071_ ? _077_ : _080_;
  assign _082_ = rst ? 1'h0 : _081_;
  assign _083_ = rst ? 1'h0 : _070_;
  assign _084_ = ~ nreset;
  assign _085_ = ~ dscl;
  assign _086_ = _085_ & sscl;
  always @(posedge clk, posedge _022_)
    if (_022_) _087_ <= 2'h0;
    else _087_ <= _023_;
  always @(posedge clk, posedge _022_)
    if (_022_) _088_ <= 2'h0;
    else _088_ <= _024_;
  always @(posedge clk, posedge _032_)
    if (_032_) _089_ <= 3'h7;
    else _089_ <= _036_;
  always @(posedge clk, posedge _032_)
    if (_032_) _090_ <= 3'h7;
    else _090_ <= _037_;
  always @(posedge clk, posedge _025_)
    if (_025_) _091_ <= 14'h0000;
    else _091_ <= _031_;
  always @(posedge clk, posedge _053_)
    if (_053_) _092_ <= 1'h0;
    else _092_ <= _060_;
  always @(posedge clk, posedge _053_)
    if (_053_) _093_ <= 1'h0;
    else _093_ <= _061_;
  always @(posedge clk, posedge _067_)
    if (_067_) _094_ <= 1'h0;
    else _094_ <= _083_;
  always @(posedge clk, posedge _062_)
    if (_062_) _095_ <= 1'h0;
    else _095_ <= _066_;
  assign _096_ = ~ nreset;
  assign _097_ = rst | ial;
  assign _098_ = cmd == 4'h1;
  assign _099_ = cmd == 4'h2;
  assign _100_ = cmd == 4'h8;
  assign _101_ = cmd == 4'h4;
  function [4:0] \2825 ;
    input [4:0] a;
    input [19:0] b;
    input [3:0] s;
    (* parallel_case *)
    casez (s)
      4'b???1:
        \2825  = b[4:0];
      4'b??1?:
        \2825  = b[9:5];
      4'b?1??:
        \2825  = b[14:10];
      4'b1???:
        \2825  = b[19:15];
      default:
        \2825  = a;
    endcase
  endfunction
  assign _102_ = \2825 (5'h00, 20'h538c1, { _101_, _100_, _099_, _098_ });
  assign _103_ = c_state == 5'h00;
  assign _104_ = c_state == 5'h01;
  assign _105_ = c_state == 5'h02;
  assign _106_ = c_state == 5'h03;
  assign _107_ = c_state == 5'h04;
  assign _108_ = c_state == 5'h05;
  assign _109_ = c_state == 5'h06;
  assign _110_ = c_state == 5'h07;
  assign _111_ = c_state == 5'h08;
  assign _112_ = c_state == 5'h09;
  assign _113_ = c_state == 5'h0a;
  assign _114_ = c_state == 5'h0b;
  assign _115_ = c_state == 5'h0c;
  assign _116_ = c_state == 5'h0d;
  assign _117_ = c_state == 5'h0e;
  assign _118_ = c_state == 5'h0f;
  assign _119_ = c_state == 5'h10;
  assign _120_ = c_state == 5'h11;
  function [0:0] \2868 ;
    input [0:0] a;
    input [17:0] b;
    input [17:0] s;
    (* parallel_case *)
    casez (s)
      18'b?????????????????1:
        \2868  = b[0:0];
      18'b????????????????1?:
        \2868  = b[1:1];
      18'b???????????????1??:
        \2868  = b[2:2];
      18'b??????????????1???:
        \2868  = b[3:3];
      18'b?????????????1????:
        \2868  = b[4:4];
      18'b????????????1?????:
        \2868  = b[5:5];
      18'b???????????1??????:
        \2868  = b[6:6];
      18'b??????????1???????:
        \2868  = b[7:7];
      18'b?????????1????????:
        \2868  = b[8:8];
      18'b????????1?????????:
        \2868  = b[9:9];
      18'b???????1??????????:
        \2868  = b[10:10];
      18'b??????1???????????:
        \2868  = b[11:11];
      18'b?????1????????????:
        \2868  = b[12:12];
      18'b????1?????????????:
        \2868  = b[13:13];
      18'b???1??????????????:
        \2868  = b[14:14];
      18'b??1???????????????:
        \2868  = b[15:15];
      18'b?1????????????????:
        \2868  = b[16:16];
      18'b1?????????????????:
        \2868  = b[17:17];
      default:
        \2868  = a;
    endcase
  endfunction
  assign _121_ = \2868 (1'h0, 18'h22220, { _120_, _119_, _118_, _117_, _116_, _115_, _114_, _113_, _112_, _111_, _110_, _109_, _108_, _107_, _106_, _105_, _104_, _103_ });
  function [0:0] \2886 ;
    input [0:0] a;
    input [17:0] b;
    input [17:0] s;
    (* parallel_case *)
    casez (s)
      18'b?????????????????1:
        \2886  = b[0:0];
      18'b????????????????1?:
        \2886  = b[1:1];
      18'b???????????????1??:
        \2886  = b[2:2];
      18'b??????????????1???:
        \2886  = b[3:3];
      18'b?????????????1????:
        \2886  = b[4:4];
      18'b????????????1?????:
        \2886  = b[5:5];
      18'b???????????1??????:
        \2886  = b[6:6];
      18'b??????????1???????:
        \2886  = b[7:7];
      18'b?????????1????????:
        \2886  = b[8:8];
      18'b????????1?????????:
        \2886  = b[9:9];
      18'b???????1??????????:
        \2886  = b[10:10];
      18'b??????1???????????:
        \2886  = b[11:11];
      18'b?????1????????????:
        \2886  = b[12:12];
      18'b????1?????????????:
        \2886  = b[13:13];
      18'b???1??????????????:
        \2886  = b[14:14];
      18'b??1???????????????:
        \2886  = b[15:15];
      18'b?1????????????????:
        \2886  = b[16:16];
      18'b1?????????????????:
        \2886  = b[17:17];
      default:
        \2886  = a;
    endcase
  endfunction
  assign _122_ = \2886 (_160_, { 17'h01e00, _160_ }, { _120_, _119_, _118_, _117_, _116_, _115_, _114_, _113_, _112_, _111_, _110_, _109_, _108_, _107_, _106_, _105_, _104_, _103_ });
  function [0:0] \2904 ;
    input [0:0] a;
    input [17:0] b;
    input [17:0] s;
    (* parallel_case *)
    casez (s)
      18'b?????????????????1:
        \2904  = b[0:0];
      18'b????????????????1?:
        \2904  = b[1:1];
      18'b???????????????1??:
        \2904  = b[2:2];
      18'b??????????????1???:
        \2904  = b[3:3];
      18'b?????????????1????:
        \2904  = b[4:4];
      18'b????????????1?????:
        \2904  = b[5:5];
      18'b???????????1??????:
        \2904  = b[6:6];
      18'b??????????1???????:
        \2904  = b[7:7];
      18'b?????????1????????:
        \2904  = b[8:8];
      18'b????????1?????????:
        \2904  = b[9:9];
      18'b???????1??????????:
        \2904  = b[10:10];
      18'b??????1???????????:
        \2904  = b[11:11];
      18'b?????1????????????:
        \2904  = b[12:12];
      18'b????1?????????????:
        \2904  = b[13:13];
      18'b???1??????????????:
        \2904  = b[14:14];
      18'b??1???????????????:
        \2904  = b[15:15];
      18'b?1????????????????:
        \2904  = b[16:16];
      18'b1?????????????????:
        \2904  = b[17:17];
      default:
        \2904  = a;
    endcase
  endfunction
  assign _123_ = \2904 (_163_, { 17'h01e00, _163_ }, { _120_, _119_, _118_, _117_, _116_, _115_, _114_, _113_, _112_, _111_, _110_, _109_, _108_, _107_, _106_, _105_, _104_, _103_ });
  function [4:0] \2922 ;
    input [4:0] a;
    input [89:0] b;
    input [17:0] s;
    (* parallel_case *)
    casez (s)
      18'b?????????????????1:
        \2922  = b[4:0];
      18'b????????????????1?:
        \2922  = b[9:5];
      18'b???????????????1??:
        \2922  = b[14:10];
      18'b??????????????1???:
        \2922  = b[19:15];
      18'b?????????????1????:
        \2922  = b[24:20];
      18'b????????????1?????:
        \2922  = b[29:25];
      18'b???????????1??????:
        \2922  = b[34:30];
      18'b??????????1???????:
        \2922  = b[39:35];
      18'b?????????1????????:
        \2922  = b[44:40];
      18'b????????1?????????:
        \2922  = b[49:45];
      18'b???????1??????????:
        \2922  = b[54:50];
      18'b??????1???????????:
        \2922  = b[59:55];
      18'b?????1????????????:
        \2922  = b[64:60];
      18'b????1?????????????:
        \2922  = b[69:65];
      18'b???1??????????????:
        \2922  = b[74:70];
      18'b??1???????????????:
        \2922  = b[79:75];
      18'b?1????????????????:
        \2922  = b[84:80];
      18'b1?????????????????:
        \2922  = b[89:85];
      default:
        \2922  = a;
    endcase
  endfunction
  assign _124_ = \2922 (c_state, { 85'h008c1e06b1604a0e029062, _102_ }, { _120_, _119_, _118_, _117_, _116_, _115_, _114_, _113_, _112_, _111_, _110_, _109_, _108_, _107_, _106_, _105_, _104_, _103_ });
  function [0:0] \2939 ;
    input [0:0] a;
    input [17:0] b;
    input [17:0] s;
    (* parallel_case *)
    casez (s)
      18'b?????????????????1:
        \2939  = b[0:0];
      18'b????????????????1?:
        \2939  = b[1:1];
      18'b???????????????1??:
        \2939  = b[2:2];
      18'b??????????????1???:
        \2939  = b[3:3];
      18'b?????????????1????:
        \2939  = b[4:4];
      18'b????????????1?????:
        \2939  = b[5:5];
      18'b???????????1??????:
        \2939  = b[6:6];
      18'b??????????1???????:
        \2939  = b[7:7];
      18'b?????????1????????:
        \2939  = b[8:8];
      18'b????????1?????????:
        \2939  = b[9:9];
      18'b???????1??????????:
        \2939  = b[10:10];
      18'b??????1???????????:
        \2939  = b[11:11];
      18'b?????1????????????:
        \2939  = b[12:12];
      18'b????1?????????????:
        \2939  = b[13:13];
      18'b???1??????????????:
        \2939  = b[14:14];
      18'b??1???????????????:
        \2939  = b[15:15];
      18'b?1????????????????:
        \2939  = b[16:16];
      18'b1?????????????????:
        \2939  = b[17:17];
      default:
        \2939  = a;
    endcase
  endfunction
  assign _125_ = \2939 (iscl_oen, { 16'h66e7, iscl_oen, iscl_oen }, { _120_, _119_, _118_, _117_, _116_, _115_, _114_, _113_, _112_, _111_, _110_, _109_, _108_, _107_, _106_, _105_, _104_, _103_ });
  function [0:0] \2953 ;
    input [0:0] a;
    input [17:0] b;
    input [17:0] s;
    (* parallel_case *)
    casez (s)
      18'b?????????????????1:
        \2953  = b[0:0];
      18'b????????????????1?:
        \2953  = b[1:1];
      18'b???????????????1??:
        \2953  = b[2:2];
      18'b??????????????1???:
        \2953  = b[3:3];
      18'b?????????????1????:
        \2953  = b[4:4];
      18'b????????????1?????:
        \2953  = b[5:5];
      18'b???????????1??????:
        \2953  = b[6:6];
      18'b??????????1???????:
        \2953  = b[7:7];
      18'b?????????1????????:
        \2953  = b[8:8];
      18'b????????1?????????:
        \2953  = b[9:9];
      18'b???????1??????????:
        \2953  = b[10:10];
      18'b??????1???????????:
        \2953  = b[11:11];
      18'b?????1????????????:
        \2953  = b[12:12];
      18'b????1?????????????:
        \2953  = b[13:13];
      18'b???1??????????????:
        \2953  = b[14:14];
      18'b??1???????????????:
        \2953  = b[15:15];
      18'b?1????????????????:
        \2953  = b[16:16];
      18'b1?????????????????:
        \2953  = b[17:17];
      default:
        \2953  = a;
    endcase
  endfunction
  assign _126_ = \2953 (isda_oen, { din, din, din, din, 13'h1f03, isda_oen }, { _120_, _119_, _118_, _117_, _116_, _115_, _114_, _113_, _112_, _111_, _110_, _109_, _108_, _107_, _106_, _105_, _104_, _103_ });
  function [0:0] \2972 ;
    input [0:0] a;
    input [17:0] b;
    input [17:0] s;
    (* parallel_case *)
    casez (s)
      18'b?????????????????1:
        \2972  = b[0:0];
      18'b????????????????1?:
        \2972  = b[1:1];
      18'b???????????????1??:
        \2972  = b[2:2];
      18'b??????????????1???:
        \2972  = b[3:3];
      18'b?????????????1????:
        \2972  = b[4:4];
      18'b????????????1?????:
        \2972  = b[5:5];
      18'b???????????1??????:
        \2972  = b[6:6];
      18'b??????????1???????:
        \2972  = b[7:7];
      18'b?????????1????????:
        \2972  = b[8:8];
      18'b????????1?????????:
        \2972  = b[9:9];
      18'b???????1??????????:
        \2972  = b[10:10];
      18'b??????1???????????:
        \2972  = b[11:11];
      18'b?????1????????????:
        \2972  = b[12:12];
      18'b????1?????????????:
        \2972  = b[13:13];
      18'b???1??????????????:
        \2972  = b[14:14];
      18'b??1???????????????:
        \2972  = b[15:15];
      18'b?1????????????????:
        \2972  = b[16:16];
      18'b1?????????????????:
        \2972  = b[17:17];
      default:
        \2972  = a;
    endcase
  endfunction
  assign _127_ = \2972 (sda_chk, 18'h10000, { _120_, _119_, _118_, _117_, _116_, _115_, _114_, _113_, _112_, _111_, _110_, _109_, _108_, _107_, _106_, _105_, _104_, _103_ });
  assign _128_ = clk_en ? _121_ : 1'h0;
  assign _129_ = clk_en ? _122_ : _160_;
  assign _130_ = clk_en ? _123_ : _163_;
  assign _131_ = clk_en ? _124_ : c_state;
  assign _132_ = clk_en ? _125_ : iscl_oen;
  assign _133_ = clk_en ? _126_ : isda_oen;
  assign _134_ = clk_en ? _127_ : sda_chk;
  assign _135_ = _097_ ? 1'h0 : _128_;
  assign _136_ = _097_ ? _160_ : _129_;
  assign _137_ = _097_ ? _163_ : _130_;
  assign _138_ = _097_ ? 5'h00 : _131_;
  assign _139_ = _097_ ? 1'h1 : _132_;
  assign _140_ = _097_ ? 1'h1 : _133_;
  assign _141_ = _097_ ? 1'h0 : _134_;
  always @(posedge clk, posedge _096_)
    if (_096_) _142_ <= 5'h00;
    else _142_ <= _138_;
  always @(posedge clk, posedge _096_)
    if (_096_) _143_ <= 1'h1;
    else _143_ <= _139_;
  always @(posedge clk, posedge _096_)
    if (_096_) _144_ <= 1'h1;
    else _144_ <= _140_;
  always @(posedge clk, posedge _096_)
    if (_096_) _145_ <= 1'h0;
    else _145_ <= _141_;
  always @(posedge clk, posedge _000_)
    if (_000_) _146_ <= 1'h0;
    else _146_ <= iscl_oen;
  always @(posedge clk, posedge _038_)
    if (_038_) _147_ <= 1'h1;
    else _147_ <= _049_;
  always @(posedge clk, posedge _038_)
    if (_038_) _148_ <= 1'h1;
    else _148_ <= _050_;
  always @(posedge clk, posedge _038_)
    if (_038_) _149_ <= 1'h1;
    else _149_ <= _051_;
  always @(posedge clk, posedge _038_)
    if (_038_) _150_ <= 1'h1;
    else _150_ <= _052_;
  always @(posedge clk, posedge _012_)
    if (_012_) _151_ <= 1'h1;
    else _151_ <= _020_;
  always @(posedge clk, posedge _001_)
    if (_001_) _152_ <= 1'h0;
    else _152_ <= _008_;
  always @(posedge clk, posedge _067_)
    if (_067_) _153_ <= 1'h0;
    else _153_ <= _082_;
  always @(posedge clk, posedge _012_)
    if (_012_) _154_ <= 16'h0000;
    else _154_ <= _021_;
  always @(posedge clk, posedge _096_)
    if (_096_) _155_ <= 1'h0;
    else _155_ <= _135_;
  assign _156_ = _086_ ? ssda : _157_;
  always @(posedge clk, posedge _084_)
    if (_084_) _157_ <= 1'h0;
    else _157_ <= _156_;
  assign _158_ = ~ _096_;
  assign _159_ = _158_ ? _136_ : _160_;
  always @(posedge clk)
    _160_ <= _159_;
  assign _161_ = ~ _096_;
  assign _162_ = _161_ ? _137_ : _163_;
  always @(posedge clk)
    _163_ <= _162_;
  assign c_state = _142_;
  assign iscl_oen = _143_;
  assign isda_oen = _144_;
  assign sda_chk = _145_;
  assign dscl_oen = _146_;
  assign sscl = _147_;
  assign ssda = _148_;
  assign dscl = _149_;
  assign dsda = _150_;
  assign clk_en = _151_;
  assign scl_sync = _011_;
  assign slave_wait = _152_;
  assign ial = _153_;
  assign cnt = _154_;
  assign \bus_status_ctrl.cscl  = _087_;
  assign \bus_status_ctrl.csda  = _088_;
  assign \bus_status_ctrl.fscl  = _089_;
  assign \bus_status_ctrl.fsda  = _090_;
  assign \bus_status_ctrl.filter_cnt  = _091_;
  assign \bus_status_ctrl.sta_condition  = _092_;
  assign \bus_status_ctrl.sto_condition  = _093_;
  assign \bus_status_ctrl.cmd_stop  = _094_;
  assign \bus_status_ctrl.ibusy  = _095_;
  assign cmd_ack = _155_;
  assign busy = \bus_status_ctrl.ibusy ;
  assign al = ial;
  assign dout = _157_;
  assign scl_o = iscl_oen;
  assign scl_oen = _160_;
  assign sda_o = isda_oen;
  assign sda_oen = _163_;
endmodule

module i2c_master_byte_ctrl(clk, rst, nreset, ena, clk_cnt, start, stop, read, write, ack_in, din, addr, scl_i, sda_i, cmd_ack, ack_out, i2c_busy, i2c_al, dout, scl_o, scl_oen
, sda_o, sda_oen);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire [7:0] _020_;
  wire [7:0] _021_;
  wire [7:0] _022_;
  wire _023_;
  wire [2:0] _024_;
  wire [2:0] _025_;
  wire [2:0] _026_;
  wire [2:0] _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire [3:0] _032_;
  wire [2:0] _033_;
  wire [3:0] _034_;
  wire [2:0] _035_;
  wire [3:0] _036_;
  wire [2:0] _037_;
  wire [3:0] _038_;
  wire _039_;
  wire [2:0] _040_;
  wire _041_;
  wire [3:0] _042_;
  wire [2:0] _043_;
  wire [3:0] _044_;
  wire _045_;
  wire _046_;
  wire [2:0] _047_;
  wire _048_;
  wire [3:0] _049_;
  wire _050_;
  wire _051_;
  wire [2:0] _052_;
  wire [3:0] _053_;
  wire _054_;
  wire _055_;
  wire [2:0] _056_;
  wire _057_;
  wire [3:0] _058_;
  wire _059_;
  wire [2:0] _060_;
  wire [3:0] _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire [2:0] _065_;
  wire _066_;
  wire [3:0] _067_;
  wire [2:0] _068_;
  wire _069_;
  wire _070_;
  wire [6:0] _071_;
  wire _072_;
  wire [3:0] _073_;
  wire _074_;
  wire [6:0] _075_;
  wire [3:0] _076_;
  wire _077_;
  wire _078_;
  wire [2:0] _079_;
  wire _080_;
  wire [3:0] _081_;
  wire _082_;
  wire [2:0] _083_;
  wire _084_;
  wire _085_;
  wire [6:0] _086_;
  wire _087_;
  wire [3:0] _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire [2:0] _093_;
  wire _094_;
  wire [6:0] _095_;
  wire _096_;
  wire [3:0] _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire [2:0] _102_;
  reg [2:0] _103_;
  reg [6:0] _104_;
  reg _105_;
  reg _106_;
  reg [3:0] _107_;
  reg _108_;
  reg [7:0] _109_;
  reg _110_;
  reg _111_;
  reg _112_;
  reg _113_;
  reg _114_;
  reg _115_;
  reg _116_;
  reg [2:0] _117_;
  reg _118_;
  input ack_in;
  wire ack_in;
  output ack_out;
  wire ack_out;
  input [6:0] addr;
  wire [6:0] addr;
  wire al;
  wire \bit_ctrl:2258 ;
  wire \bit_ctrl:2259 ;
  wire \bit_ctrl:2260 ;
  wire \bit_ctrl:2261 ;
  wire \bit_ctrl:2262 ;
  wire \bit_ctrl:2263 ;
  wire \bit_ctrl:2264 ;
  wire \bit_ctrl:2265 ;
  wire busy_detected;
  input clk;
  wire clk;
  input [15:0] clk_cnt;
  wire [15:0] clk_cnt;
  output cmd_ack;
  wire cmd_ack;
  wire cnt_done;
  wire core_ack;
  wire [3:0] core_cmd;
  wire core_rxd;
  wire core_txd;
  wire [2:0] dcnt;
  input [7:0] din;
  wire [7:0] din;
  output [7:0] dout;
  wire [7:0] dout;
  input ena;
  wire ena;
  wire fb_detected;
  wire go;
  wire host_ack;
  output i2c_al;
  wire i2c_al;
  output i2c_busy;
  wire i2c_busy;
  wire ld;
  wire ld_d1;
  wire ld_d2;
  wire ld_d3;
  wire ld_d4;
  wire [6:0] lstn_addrss;
  input nreset;
  wire nreset;
  input read;
  wire read;
  input rst;
  wire rst;
  input scl_i;
  wire scl_i;
  output scl_o;
  wire scl_o;
  output scl_oen;
  wire scl_oen;
  input sda_i;
  wire sda_i;
  output sda_o;
  wire sda_o;
  output sda_oen;
  wire sda_oen;
  wire shift;
  wire [7:0] sr;
  input start;
  wire start;
  wire [2:0] \statemachine.c_state ;
  input stop;
  wire stop;
  input write;
  wire write;
  assign _008_ = read | write;
  assign _009_ = _008_ | stop;
  assign _010_ = ~ host_ack;
  assign _011_ = _009_ & _010_;
  assign _012_ = ~ nreset;
  assign _013_ = ~ fb_detected;
  assign _014_ = _013_ & busy_detected;
  assign _015_ = lstn_addrss == 7'h7f;
  assign _016_ = _015_ & _014_;
  assign _017_ = _016_ ? 1'h1 : fb_detected;
  assign _018_ = rst ? 1'h0 : _017_;
  assign _019_ = ~ nreset;
  assign _020_ = shift ? { sr[6:0], core_rxd } : sr;
  assign _021_ = ld_d4 ? din : _020_;
  assign _022_ = rst ? 8'h00 : _021_;
  assign _023_ = ~ nreset;
  assign _024_ = dcnt - 3'h1;
  assign _025_ = shift ? _024_ : dcnt;
  assign _026_ = ld ? 3'h7 : _025_;
  assign _027_ = rst ? 3'h0 : _026_;
  assign _028_ = dcnt == 3'h0;
  assign _029_ = _028_ ? 1'h1 : 1'h0;
  assign _030_ = ~ nreset;
  assign _031_ = rst | al;
  assign _032_ = read ? 4'h4 : 4'h2;
  assign _033_ = read ? 3'h2 : 3'h5;
  assign _034_ = write ? 4'h8 : _032_;
  assign _035_ = write ? 3'h3 : _033_;
  assign _036_ = start ? 4'h1 : _034_;
  assign _037_ = start ? 3'h1 : _035_;
  assign _038_ = go ? _036_ : core_cmd;
  assign _039_ = go ? 1'h1 : 1'h0;
  assign _040_ = go ? _037_ : \statemachine.c_state ;
  assign _041_ = \statemachine.c_state  == 3'h0;
  assign _042_ = read ? 4'h4 : 4'h8;
  assign _043_ = read ? 3'h2 : 3'h3;
  assign _044_ = core_ack ? _042_ : core_cmd;
  assign _045_ = core_ack ? 1'h1 : 1'h0;
  assign _046_ = core_ack ? 1'h1 : 1'h0;
  assign _047_ = core_ack ? _043_ : \statemachine.c_state ;
  assign _048_ = \statemachine.c_state  == 3'h1;
  assign _049_ = cnt_done ? 4'h4 : 4'h8;
  assign _050_ = cnt_done ? 1'h0 : 1'h1;
  assign _051_ = cnt_done ? 1'h1 : 1'h0;
  assign _052_ = cnt_done ? 3'h4 : 3'h3;
  assign _053_ = core_ack ? _049_ : core_cmd;
  assign _054_ = core_ack ? _050_ : 1'h0;
  assign _055_ = core_ack ? _051_ : 1'h0;
  assign _056_ = core_ack ? _052_ : \statemachine.c_state ;
  assign _057_ = \statemachine.c_state  == 3'h3;
  assign _058_ = cnt_done ? 4'h8 : 4'h4;
  assign _059_ = cnt_done ? 1'h1 : 1'h0;
  assign _060_ = cnt_done ? 3'h4 : 3'h2;
  assign _061_ = core_ack ? _058_ : core_cmd;
  assign _062_ = core_ack ? ack_in : sr[7];
  assign _063_ = core_ack ? 1'h1 : 1'h0;
  assign _064_ = core_ack ? _059_ : 1'h0;
  assign _065_ = core_ack ? _060_ : \statemachine.c_state ;
  assign _066_ = \statemachine.c_state  == 3'h2;
  assign _067_ = stop ? 4'h2 : 4'h0;
  assign _068_ = stop ? 3'h5 : 3'h0;
  assign _069_ = lstn_addrss == 7'h7f;
  assign _070_ = _069_ & fb_detected;
  assign _071_ = _070_ ? sr[6:0] : lstn_addrss;
  assign _072_ = lstn_addrss == addr;
  assign _073_ = _072_ ? 4'h8 : 4'h4;
  assign _074_ = core_ack ? core_rxd : _118_;
  assign _075_ = core_ack ? lstn_addrss : _071_;
  assign _076_ = core_ack ? _067_ : _073_;
  assign _077_ = core_ack ? 1'h1 : 1'h0;
  assign _078_ = core_ack ? 1'h1 : 1'h0;
  assign _079_ = core_ack ? _068_ : 3'h4;
  assign _080_ = \statemachine.c_state  == 3'h4;
  assign _081_ = core_ack ? 4'h0 : core_cmd;
  assign _082_ = core_ack ? 1'h1 : 1'h0;
  assign _083_ = core_ack ? 3'h0 : \statemachine.c_state ;
  assign _084_ = \statemachine.c_state  == 3'h5;
  function [0:0] \2466 ;
    input [0:0] a;
    input [5:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \2466  = b[0:0];
      6'b????1?:
        \2466  = b[1:1];
      6'b???1??:
        \2466  = b[2:2];
      6'b??1???:
        \2466  = b[3:3];
      6'b?1????:
        \2466  = b[4:4];
      6'b1?????:
        \2466  = b[5:5];
      default:
        \2466  = a;
    endcase
  endfunction
  assign _085_ = \2466 (_118_, { _118_, _074_, _118_, _118_, _118_, _118_ }, { _084_, _080_, _066_, _057_, _048_, _041_ });
  function [6:0] \2467 ;
    input [6:0] a;
    input [41:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \2467  = b[6:0];
      6'b????1?:
        \2467  = b[13:7];
      6'b???1??:
        \2467  = b[20:14];
      6'b??1???:
        \2467  = b[27:21];
      6'b?1????:
        \2467  = b[34:28];
      6'b1?????:
        \2467  = b[41:35];
      default:
        \2467  = a;
    endcase
  endfunction
  assign _086_ = \2467 (lstn_addrss, { lstn_addrss, _075_, lstn_addrss, lstn_addrss, lstn_addrss, lstn_addrss }, { _084_, _080_, _066_, _057_, _048_, _041_ });
  function [0:0] \2477 ;
    input [0:0] a;
    input [5:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \2477  = b[0:0];
      6'b????1?:
        \2477  = b[1:1];
      6'b???1??:
        \2477  = b[2:2];
      6'b??1???:
        \2477  = b[3:3];
      6'b?1????:
        \2477  = b[4:4];
      6'b1?????:
        \2477  = b[5:5];
      default:
        \2477  = a;
    endcase
  endfunction
  assign _087_ = \2477 (1'h0, 6'h1e, { _084_, _080_, _066_, _057_, _048_, _041_ });
  function [3:0] \2480 ;
    input [3:0] a;
    input [23:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \2480  = b[3:0];
      6'b????1?:
        \2480  = b[7:4];
      6'b???1??:
        \2480  = b[11:8];
      6'b??1???:
        \2480  = b[15:12];
      6'b?1????:
        \2480  = b[19:16];
      6'b1?????:
        \2480  = b[23:20];
      default:
        \2480  = a;
    endcase
  endfunction
  assign _088_ = \2480 (4'h0, { _081_, _076_, _061_, _053_, _044_, _038_ }, { _084_, _080_, _066_, _057_, _048_, _041_ });
  function [0:0] \2481 ;
    input [0:0] a;
    input [5:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \2481  = b[0:0];
      6'b????1?:
        \2481  = b[1:1];
      6'b???1??:
        \2481  = b[2:2];
      6'b??1???:
        \2481  = b[3:3];
      6'b?1????:
        \2481  = b[4:4];
      6'b1?????:
        \2481  = b[5:5];
      default:
        \2481  = a;
    endcase
  endfunction
  assign _089_ = \2481 (sr[7], { sr[7], _077_, _062_, sr[7], sr[7], sr[7] }, { _084_, _080_, _066_, _057_, _048_, _041_ });
  function [0:0] \2483 ;
    input [0:0] a;
    input [5:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \2483  = b[0:0];
      6'b????1?:
        \2483  = b[1:1];
      6'b???1??:
        \2483  = b[2:2];
      6'b??1???:
        \2483  = b[3:3];
      6'b?1????:
        \2483  = b[4:4];
      6'b1?????:
        \2483  = b[5:5];
      default:
        \2483  = a;
    endcase
  endfunction
  assign _090_ = \2483 (1'h0, { 2'h0, _063_, _054_, 2'h0 }, { _084_, _080_, _066_, _057_, _048_, _041_ });
  function [0:0] \2486 ;
    input [0:0] a;
    input [5:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \2486  = b[0:0];
      6'b????1?:
        \2486  = b[1:1];
      6'b???1??:
        \2486  = b[2:2];
      6'b??1???:
        \2486  = b[3:3];
      6'b?1????:
        \2486  = b[4:4];
      6'b1?????:
        \2486  = b[5:5];
      default:
        \2486  = a;
    endcase
  endfunction
  assign _091_ = \2486 (1'h0, { 4'h0, _045_, _039_ }, { _084_, _080_, _066_, _057_, _048_, _041_ });
  function [0:0] \2490 ;
    input [0:0] a;
    input [5:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \2490  = b[0:0];
      6'b????1?:
        \2490  = b[1:1];
      6'b???1??:
        \2490  = b[2:2];
      6'b??1???:
        \2490  = b[3:3];
      6'b?1????:
        \2490  = b[4:4];
      6'b1?????:
        \2490  = b[5:5];
      default:
        \2490  = a;
    endcase
  endfunction
  assign _092_ = \2490 (1'h1, { _082_, _078_, _064_, _055_, _046_, 1'h0 }, { _084_, _080_, _066_, _057_, _048_, _041_ });
  function [2:0] \2493 ;
    input [2:0] a;
    input [17:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \2493  = b[2:0];
      6'b????1?:
        \2493  = b[5:3];
      6'b???1??:
        \2493  = b[8:6];
      6'b??1???:
        \2493  = b[11:9];
      6'b?1????:
        \2493  = b[14:12];
      6'b1?????:
        \2493  = b[17:15];
      default:
        \2493  = a;
    endcase
  endfunction
  assign _093_ = \2493 (3'h0, { _083_, _079_, _065_, _056_, _047_, _040_ }, { _084_, _080_, _066_, _057_, _048_, _041_ });
  assign _094_ = _031_ ? 1'h0 : _085_;
  assign _095_ = _031_ ? 7'h7f : _086_;
  assign _096_ = _031_ ? 1'h0 : _087_;
  assign _097_ = _031_ ? 4'h0 : _088_;
  assign _098_ = _031_ ? 1'h0 : _089_;
  assign _099_ = _031_ ? 1'h0 : _090_;
  assign _100_ = _031_ ? 1'h0 : _091_;
  assign _101_ = _031_ ? 1'h0 : _092_;
  assign _102_ = _031_ ? 3'h0 : _093_;
  always @(posedge clk, posedge _030_)
    if (_030_) _103_ <= 3'h0;
    else _103_ <= _102_;
  always @(posedge clk, posedge _030_)
    if (_030_) _104_ <= 7'h7f;
    else _104_ <= _095_;
  always @(posedge clk, posedge _012_)
    if (_012_) _105_ <= 1'h0;
    else _105_ <= _018_;
  always @(posedge clk, posedge _030_)
    if (_030_) _106_ <= 1'h0;
    else _106_ <= _096_;
  always @(posedge clk, posedge _030_)
    if (_030_) _107_ <= 4'h0;
    else _107_ <= _097_;
  always @(posedge clk, posedge _030_)
    if (_030_) _108_ <= 1'h0;
    else _108_ <= _098_;
  always @(posedge clk, posedge _019_)
    if (_019_) _109_ <= 8'h00;
    else _109_ <= _022_;
  always @(posedge clk, posedge _030_)
    if (_030_) _110_ <= 1'h0;
    else _110_ <= _099_;
  always @(posedge clk, posedge _030_)
    if (_030_) _111_ <= 1'h0;
    else _111_ <= _100_;
  always @(posedge clk)
    _112_ <= ld_d3;
  always @(posedge clk)
    _113_ <= ld_d2;
  always @(posedge clk)
    _114_ <= ld_d1;
  always @(posedge clk)
    _115_ <= ld;
  always @(posedge clk, posedge _030_)
    if (_030_) _116_ <= 1'h0;
    else _116_ <= _101_;
  always @(posedge clk, posedge _023_)
    if (_023_) _117_ <= 3'h0;
    else _117_ <= _027_;
  always @(posedge clk, posedge _030_)
    if (_030_) _118_ <= 1'h0;
    else _118_ <= _094_;
  i2c_master_bit_ctrl bit_ctrl (
    .al(_002_),
    .busy(_001_),
    .clk(clk),
    .clk_cnt(clk_cnt),
    .cmd(core_cmd),
    .cmd_ack(_000_),
    .din(core_txd),
    .dout(_003_),
    .ena(ena),
    .nreset(nreset),
    .rst(rst),
    .scl_i(scl_i),
    .scl_o(_004_),
    .scl_oen(_005_),
    .sda_i(sda_i),
    .sda_o(_006_),
    .sda_oen(_007_)
  );
  assign lstn_addrss = _104_;
  assign fb_detected = _105_;
  assign busy_detected = _106_;
  assign core_cmd = _107_;
  assign core_ack = \bit_ctrl:2258 ;
  assign core_txd = _108_;
  assign core_rxd = \bit_ctrl:2261 ;
  assign al = \bit_ctrl:2260 ;
  assign sr = _109_;
  assign shift = _110_;
  assign ld = _111_;
  assign ld_d4 = _112_;
  assign ld_d3 = _113_;
  assign ld_d2 = _114_;
  assign ld_d1 = _115_;
  assign go = _011_;
  assign host_ack = _116_;
  assign dcnt = _117_;
  assign cnt_done = _029_;
  assign \bit_ctrl:2258  = _000_;
  assign \bit_ctrl:2259  = _001_;
  assign \bit_ctrl:2260  = _002_;
  assign \bit_ctrl:2261  = _003_;
  assign \bit_ctrl:2262  = _004_;
  assign \bit_ctrl:2263  = _005_;
  assign \bit_ctrl:2264  = _006_;
  assign \bit_ctrl:2265  = _007_;
  assign \statemachine.c_state  = _103_;
  assign cmd_ack = host_ack;
  assign ack_out = _118_;
  assign i2c_busy = \bit_ctrl:2259 ;
  assign i2c_al = al;
  assign dout = sr;
  assign scl_o = \bit_ctrl:2262 ;
  assign scl_oen = \bit_ctrl:2263 ;
  assign sda_o = \bit_ctrl:2264 ;
  assign sda_oen = \bit_ctrl:2265 ;
endmodule

module i2c_master_top_c4ea21bb365bbeeaf5f2c654883e56d11e43c44e(wb_clk_i, wb_rst_i, arst_i, wb_adr_i, wb_dat_i, wb_we_i, wb_stb_i, wb_cyc_i, i2c_addr_i, scl_pad_i, sda_pad_i, sc_done_o, wb_dat_o, wb_ack_o, wb_inta_o, scl_pad_o, scl_padoen_o, sda_pad_o, sda_padoen_o);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire [7:0] _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire [7:0] _20_;
  wire [7:0] _21_;
  wire [7:0] _22_;
  wire [7:0] _23_;
  wire [15:0] _24_;
  wire [7:0] _25_;
  wire [7:0] _26_;
  wire [15:0] _27_;
  wire [7:0] _28_;
  wire [7:0] _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire [7:0] _33_;
  wire _34_;
  wire [3:0] _35_;
  wire [2:0] _36_;
  wire _37_;
  wire [3:0] _38_;
  wire [7:0] _39_;
  wire _40_;
  wire _41_;
  wire _42_;
  wire _43_;
  wire [7:0] _44_;
  wire _45_;
  wire _46_;
  wire _47_;
  wire _48_;
  wire _49_;
  wire _50_;
  wire _51_;
  wire _52_;
  wire _53_;
  wire _54_;
  wire _55_;
  wire _56_;
  wire _57_;
  wire _58_;
  wire _59_;
  wire _60_;
  wire _61_;
  wire _62_;
  wire _63_;
  wire _64_;
  reg [15:0] _65_;
  reg [7:0] _66_;
  reg [7:0] _67_;
  reg [7:0] _68_;
  reg _69_ = 1'h0;
  reg _70_;
  reg _71_;
  reg _72_;
  reg _73_;
  reg [7:0] _74_;
  reg _75_;
  wire ack;
  wire al;
  input arst_i;
  wire arst_i;
  wire \byte_ctrl:2167 ;
  wire \byte_ctrl:2168 ;
  wire \byte_ctrl:2169 ;
  wire \byte_ctrl:2170 ;
  wire [7:0] \byte_ctrl:2171 ;
  wire \byte_ctrl:2172 ;
  wire \byte_ctrl:2173 ;
  wire \byte_ctrl:2174 ;
  wire \byte_ctrl:2175 ;
  wire core_en;
  wire [7:0] cr;
  wire [7:0] ctr;
  wire done;
  input [6:0] i2c_addr_i;
  wire [6:0] i2c_addr_i;
  wire [6:0] i2c_addr_o;
  wire i2c_al;
  wire i2c_busy;
  wire iack;
  wire iack_o;
  wire ien;
  wire irq_flag;
  wire irxack;
  wire [15:0] prer;
  wire rd;
  wire rst_i;
  wire rxack;
  wire [7:0] rxr;
  output sc_done_o;
  wire sc_done_o;
  input scl_pad_i;
  wire scl_pad_i;
  output scl_pad_o;
  wire scl_pad_o;
  output scl_padoen_o;
  wire scl_padoen_o;
  input sda_pad_i;
  wire sda_pad_i;
  output sda_pad_o;
  wire sda_pad_o;
  output sda_padoen_o;
  wire sda_padoen_o;
  wire [7:0] sr;
  wire sta;
  wire sto;
  wire tip;
  wire [7:0] txr;
  output wb_ack_o;
  wire wb_ack_o;
  input [2:0] wb_adr_i;
  wire [2:0] wb_adr_i;
  input wb_clk_i;
  wire wb_clk_i;
  input wb_cyc_i;
  wire wb_cyc_i;
  input [7:0] wb_dat_i;
  wire [7:0] wb_dat_i;
  output [7:0] wb_dat_o;
  wire [7:0] wb_dat_o;
  output wb_inta_o;
  wire wb_inta_o;
  input wb_rst_i;
  wire wb_rst_i;
  input wb_stb_i;
  wire wb_stb_i;
  wire wb_wacc;
  input wb_we_i;
  wire wb_we_i;
  wire wr;
  assign _00_ = arst_i ^ 1'h0;
  assign _01_ = wb_cyc_i & wb_stb_i;
  assign _02_ = ~ iack_o;
  assign _03_ = _01_ & _02_;
  assign _04_ = wb_we_i & iack_o;
  assign _05_ = wb_adr_i == 3'h0;
  assign _06_ = wb_adr_i == 3'h1;
  assign _07_ = wb_adr_i == 3'h2;
  assign _08_ = wb_adr_i == 3'h3;
  assign _09_ = wb_adr_i == 3'h4;
  assign _10_ = wb_adr_i == 3'h5;
  assign _11_ = wb_adr_i == 3'h6;
  assign _12_ = wb_adr_i == 3'h7;
  function [7:0] \2084 ;
    input [7:0] a;
    input [63:0] b;
    input [7:0] s;
    (* parallel_case *)
    casez (s)
      8'b???????1:
        \2084  = b[7:0];
      8'b??????1?:
        \2084  = b[15:8];
      8'b?????1??:
        \2084  = b[23:16];
      8'b????1???:
        \2084  = b[31:24];
      8'b???1????:
        \2084  = b[39:32];
      8'b??1?????:
        \2084  = b[47:40];
      8'b?1??????:
        \2084  = b[55:48];
      8'b1???????:
        \2084  = b[63:56];
      default:
        \2084  = a;
    endcase
  endfunction
  assign _13_ = \2084 (8'hxx, { 8'h00, cr, txr, sr, rxr, ctr, prer }, { _12_, _11_, _10_, _09_, _08_, _07_, _06_, _05_ });
  assign _14_ = ~ rst_i;
  assign _15_ = wb_adr_i == 3'h0;
  assign _16_ = wb_adr_i == 3'h1;
  assign _17_ = wb_adr_i == 3'h2;
  assign _18_ = wb_adr_i == 3'h3;
  assign _19_ = wb_adr_i == 3'h4;
  function [7:0] \2103 ;
    input [7:0] a;
    input [39:0] b;
    input [4:0] s;
    (* parallel_case *)
    casez (s)
      5'b????1:
        \2103  = b[7:0];
      5'b???1?:
        \2103  = b[15:8];
      5'b??1??:
        \2103  = b[23:16];
      5'b?1???:
        \2103  = b[31:24];
      5'b1????:
        \2103  = b[39:32];
      default:
        \2103  = a;
    endcase
  endfunction
  assign _20_ = \2103 (8'hxx, { prer[7:0], prer[7:0], prer[7:0], prer[7:0], wb_dat_i }, { _19_, _18_, _17_, _16_, _15_ });
  function [7:0] \2106 ;
    input [7:0] a;
    input [39:0] b;
    input [4:0] s;
    (* parallel_case *)
    casez (s)
      5'b????1:
        \2106  = b[7:0];
      5'b???1?:
        \2106  = b[15:8];
      5'b??1??:
        \2106  = b[23:16];
      5'b?1???:
        \2106  = b[31:24];
      5'b1????:
        \2106  = b[39:32];
      default:
        \2106  = a;
    endcase
  endfunction
  assign _21_ = \2106 (8'hxx, { prer[15:8], prer[15:8], prer[15:8], wb_dat_i, prer[15:8] }, { _19_, _18_, _17_, _16_, _15_ });
  function [7:0] \2108 ;
    input [7:0] a;
    input [39:0] b;
    input [4:0] s;
    (* parallel_case *)
    casez (s)
      5'b????1:
        \2108  = b[7:0];
      5'b???1?:
        \2108  = b[15:8];
      5'b??1??:
        \2108  = b[23:16];
      5'b?1???:
        \2108  = b[31:24];
      5'b1????:
        \2108  = b[39:32];
      default:
        \2108  = a;
    endcase
  endfunction
  assign _22_ = \2108 (8'hxx, { ctr, ctr, wb_dat_i, ctr, ctr }, { _19_, _18_, _17_, _16_, _15_ });
  function [7:0] \2110 ;
    input [7:0] a;
    input [39:0] b;
    input [4:0] s;
    (* parallel_case *)
    casez (s)
      5'b????1:
        \2110  = b[7:0];
      5'b???1?:
        \2110  = b[15:8];
      5'b??1??:
        \2110  = b[23:16];
      5'b?1???:
        \2110  = b[31:24];
      5'b1????:
        \2110  = b[39:32];
      default:
        \2110  = a;
    endcase
  endfunction
  assign _23_ = \2110 (8'hxx, { txr, wb_dat_i, txr, txr, txr }, { _19_, _18_, _17_, _16_, _15_ });
  assign _24_ = wb_wacc ? { _21_, _20_ } : prer;
  assign _25_ = wb_wacc ? _22_ : ctr;
  assign _26_ = wb_wacc ? _23_ : txr;
  assign _27_ = wb_rst_i ? 16'hffff : _24_;
  assign _28_ = wb_rst_i ? 8'h00 : _25_;
  assign _29_ = wb_rst_i ? 8'h00 : _26_;
  assign _30_ = ~ rst_i;
  assign _31_ = wb_adr_i == 3'h4;
  assign _32_ = _31_ & core_en;
  assign _33_ = _32_ ? wb_dat_i : cr;
  assign _34_ = done | i2c_al;
  assign _35_ = _34_ ? 4'h0 : cr[7:4];
  assign _36_ = wb_wacc ? _33_[2:0] : 3'h0;
  assign _37_ = wb_wacc ? _33_[3] : cr[3];
  assign _38_ = wb_wacc ? _33_[7:4] : _35_;
  assign _39_ = wb_rst_i ? 8'h00 : { _38_, _37_, _36_ };
  assign _49_ = ~ rst_i;
  assign _50_ = ~ sta;
  assign _51_ = al & _50_;
  assign _52_ = i2c_al | _51_;
  assign _53_ = rd | wr;
  assign _54_ = done | i2c_al;
  assign _55_ = _54_ | irq_flag;
  assign _56_ = ~ iack;
  assign _57_ = _55_ & _56_;
  assign _58_ = wb_rst_i ? 1'h0 : irxack;
  assign _59_ = wb_rst_i ? 1'h0 : _53_;
  assign _60_ = wb_rst_i ? 1'h0 : _57_;
  assign _61_ = wb_rst_i ? 1'h0 : _52_;
  assign _62_ = ~ rst_i;
  assign _63_ = irq_flag & ien;
  assign _64_ = wb_rst_i ? 1'h0 : _63_;
  always @(posedge wb_clk_i, posedge _14_)
    if (_14_) _65_ <= 16'hffff;
    else _65_ <= _27_;
  always @(posedge wb_clk_i, posedge _14_)
    if (_14_) _66_ <= 8'h00;
    else _66_ <= _28_;
  always @(posedge wb_clk_i, posedge _14_)
    if (_14_) _67_ <= 8'h00;
    else _67_ <= _29_;
  always @(posedge wb_clk_i, posedge _30_)
    if (_30_) _68_ <= 8'h00;
    else _68_ <= _39_;
  always @(posedge wb_clk_i)
    _69_ <= _03_;
  always @(posedge wb_clk_i, posedge _49_)
    if (_49_) _70_ <= 1'h0;
    else _70_ <= _58_;
  always @(posedge wb_clk_i, posedge _49_)
    if (_49_) _71_ <= 1'h0;
    else _71_ <= _59_;
  always @(posedge wb_clk_i, posedge _49_)
    if (_49_) _72_ <= 1'h0;
    else _72_ <= _60_;
  always @(posedge wb_clk_i, posedge _49_)
    if (_49_) _73_ <= 1'h0;
    else _73_ <= _61_;
  always @(posedge wb_clk_i)
    _74_ <= _13_;
  always @(posedge wb_clk_i, posedge _62_)
    if (_62_) _75_ <= 1'h0;
    else _75_ <= _64_;
  i2c_master_byte_ctrl byte_ctrl (
    .ack_in(ack),
    .ack_out(_41_),
    .addr(i2c_addr_o),
    .clk(wb_clk_i),
    .clk_cnt(prer),
    .cmd_ack(_40_),
    .din(txr),
    .dout(_44_),
    .ena(core_en),
    .i2c_al(_43_),
    .i2c_busy(_42_),
    .nreset(rst_i),
    .read(rd),
    .rst(wb_rst_i),
    .scl_i(scl_pad_i),
    .scl_o(_45_),
    .scl_oen(_46_),
    .sda_i(sda_pad_i),
    .sda_o(_47_),
    .sda_oen(_48_),
    .start(sta),
    .stop(sto),
    .write(wr)
  );
  assign prer = _65_;
  assign ctr = _66_;
  assign txr = _67_;
  assign rxr = \byte_ctrl:2171 ;
  assign cr = _68_;
  assign sr = { rxack, i2c_busy, al, 3'h0, tip, irq_flag };
  assign i2c_addr_o = i2c_addr_i;
  assign rst_i = _00_;
  assign wb_wacc = _04_;
  assign iack_o = _69_;
  assign done = \byte_ctrl:2167 ;
  assign sta = cr[7];
  assign sto = cr[6];
  assign rd = cr[5];
  assign wr = cr[4];
  assign ack = cr[3];
  assign iack = cr[0];
  assign core_en = ctr[7];
  assign ien = ctr[6];
  assign irxack = \byte_ctrl:2168 ;
  assign rxack = _70_;
  assign tip = _71_;
  assign irq_flag = _72_;
  assign i2c_busy = \byte_ctrl:2169 ;
  assign i2c_al = \byte_ctrl:2170 ;
  assign al = _73_;
  assign \byte_ctrl:2167  = _40_;
  assign \byte_ctrl:2168  = _41_;
  assign \byte_ctrl:2169  = _42_;
  assign \byte_ctrl:2170  = _43_;
  assign \byte_ctrl:2171  = _44_;
  assign \byte_ctrl:2172  = _45_;
  assign \byte_ctrl:2173  = _46_;
  assign \byte_ctrl:2174  = _47_;
  assign \byte_ctrl:2175  = _48_;
  assign sc_done_o = done;
  assign wb_dat_o = _74_;
  assign wb_ack_o = iack_o;
  assign wb_inta_o = _75_;
  assign scl_pad_o = \byte_ctrl:2172 ;
  assign scl_padoen_o = \byte_ctrl:2173 ;
  assign sda_pad_o = \byte_ctrl:2174 ;
  assign sda_padoen_o = \byte_ctrl:2175 ;
endmodule

module memory_dump_serial(m_clock, m_reset, m_write_e, m_address, m_datain, m_start_dump, m_data_dump);
  wire [7:0] _0000_;
  wire [7:0] _0001_;
  wire [7:0] _0002_;
  wire [7:0] _0003_;
  wire [7:0] _0004_;
  wire [7:0] _0005_;
  wire [7:0] _0006_;
  wire [7:0] _0007_;
  wire [7:0] _0008_;
  wire [7:0] _0009_;
  wire [7:0] _0010_;
  wire [7:0] _0011_;
  wire [7:0] _0012_;
  wire [7:0] _0013_;
  wire [7:0] _0014_;
  wire [7:0] _0015_;
  wire [7:0] _0016_;
  wire [7:0] _0017_;
  wire [7:0] _0018_;
  wire [7:0] _0019_;
  wire [7:0] _0020_;
  wire [7:0] _0021_;
  wire [7:0] _0022_;
  wire [7:0] _0023_;
  wire [7:0] _0024_;
  wire [7:0] _0025_;
  wire [7:0] _0026_;
  wire [7:0] _0027_;
  wire [7:0] _0028_;
  wire [7:0] _0029_;
  wire [7:0] _0030_;
  wire [7:0] _0031_;
  wire [7:0] _0032_;
  wire [7:0] _0033_;
  wire [7:0] _0034_;
  wire [7:0] _0035_;
  wire [7:0] _0036_;
  wire [7:0] _0037_;
  wire [7:0] _0038_;
  wire [7:0] _0039_;
  wire [7:0] _0040_;
  wire [7:0] _0041_;
  wire [7:0] _0042_;
  wire [7:0] _0043_;
  wire [7:0] _0044_;
  wire [7:0] _0045_;
  wire [7:0] _0046_;
  wire [7:0] _0047_;
  wire [7:0] _0048_;
  wire [7:0] _0049_;
  wire [7:0] _0050_;
  wire [7:0] _0051_;
  wire [7:0] _0052_;
  wire [7:0] _0053_;
  wire [7:0] _0054_;
  wire [7:0] _0055_;
  wire [7:0] _0056_;
  wire [7:0] _0057_;
  wire [7:0] _0058_;
  wire [7:0] _0059_;
  wire [7:0] _0060_;
  wire [7:0] _0061_;
  wire [7:0] _0062_;
  wire [7:0] _0063_;
  wire [7:0] _0064_;
  wire [7:0] _0065_;
  wire [7:0] _0066_;
  wire [7:0] _0067_;
  wire [7:0] _0068_;
  wire [7:0] _0069_;
  wire [7:0] _0070_;
  wire [7:0] _0071_;
  wire [7:0] _0072_;
  wire [7:0] _0073_;
  wire [7:0] _0074_;
  wire [7:0] _0075_;
  wire [7:0] _0076_;
  wire [7:0] _0077_;
  wire [7:0] _0078_;
  wire [7:0] _0079_;
  wire [7:0] _0080_;
  wire [7:0] _0081_;
  wire [7:0] _0082_;
  wire [7:0] _0083_;
  wire [7:0] _0084_;
  wire _0085_;
  wire _0086_;
  wire [7:0] _0087_;
  wire [7:0] _0088_;
  wire [7:0] _0089_;
  wire [7:0] _0090_;
  wire [7:0] _0091_;
  wire [7:0] _0092_;
  wire [7:0] _0093_;
  wire [7:0] _0094_;
  wire [7:0] _0095_;
  wire [7:0] _0096_;
  wire [7:0] _0097_;
  wire [7:0] _0098_;
  wire [7:0] _0099_;
  wire [7:0] _0100_;
  wire [7:0] _0101_;
  wire [7:0] _0102_;
  wire [7:0] _0103_;
  wire [7:0] _0104_;
  wire [7:0] _0105_;
  wire [7:0] _0106_;
  wire [7:0] _0107_;
  wire [7:0] _0108_;
  wire [7:0] _0109_;
  wire [7:0] _0110_;
  wire [7:0] _0111_;
  wire [7:0] _0112_;
  wire [7:0] _0113_;
  wire [7:0] _0114_;
  wire [7:0] _0115_;
  wire [7:0] _0116_;
  wire [7:0] _0117_;
  wire [7:0] _0118_;
  wire [7:0] _0119_;
  wire [7:0] _0120_;
  wire [7:0] _0121_;
  wire [7:0] _0122_;
  wire [7:0] _0123_;
  wire [7:0] _0124_;
  wire [7:0] _0125_;
  wire [7:0] _0126_;
  wire [7:0] _0127_;
  wire [7:0] _0128_;
  wire [7:0] _0129_;
  wire [7:0] _0130_;
  wire [7:0] _0131_;
  wire [7:0] _0132_;
  wire [7:0] _0133_;
  wire [7:0] _0134_;
  wire [7:0] _0135_;
  wire [7:0] _0136_;
  wire [7:0] _0137_;
  wire [7:0] _0138_;
  wire [7:0] _0139_;
  wire [7:0] _0140_;
  wire [7:0] _0141_;
  wire [7:0] _0142_;
  wire [7:0] _0143_;
  wire [7:0] _0144_;
  wire [7:0] _0145_;
  wire [7:0] _0146_;
  wire [7:0] _0147_;
  wire [7:0] _0148_;
  wire [7:0] _0149_;
  wire [7:0] _0150_;
  wire [7:0] _0151_;
  wire [7:0] _0152_;
  wire [7:0] _0153_;
  wire [7:0] _0154_;
  wire [7:0] _0155_;
  wire [7:0] _0156_;
  wire [7:0] _0157_;
  wire [7:0] _0158_;
  wire [7:0] _0159_;
  wire [7:0] _0160_;
  wire [7:0] _0161_;
  wire [7:0] _0162_;
  wire [7:0] _0163_;
  wire [7:0] _0164_;
  wire [7:0] _0165_;
  wire [7:0] _0166_;
  wire [7:0] _0167_;
  wire [7:0] _0168_;
  wire [7:0] _0169_;
  wire [7:0] _0170_;
  wire [7:0] _0171_;
  wire _0172_;
  wire _0173_;
  wire [7:0] _0174_;
  wire [7:0] _0175_;
  wire [7:0] _0176_;
  wire [7:0] _0177_;
  wire [7:0] _0178_;
  wire [7:0] _0179_;
  wire [7:0] _0180_;
  wire [7:0] _0181_;
  wire [7:0] _0182_;
  wire [7:0] _0183_;
  wire [7:0] _0184_;
  wire [7:0] _0185_;
  wire [7:0] _0186_;
  wire [7:0] _0187_;
  wire [7:0] _0188_;
  wire [7:0] _0189_;
  wire [7:0] _0190_;
  wire [7:0] _0191_;
  wire [7:0] _0192_;
  wire [7:0] _0193_;
  wire [7:0] _0194_;
  wire [7:0] _0195_;
  wire [7:0] _0196_;
  wire [7:0] _0197_;
  wire [7:0] _0198_;
  wire [7:0] _0199_;
  wire [7:0] _0200_;
  wire [7:0] _0201_;
  wire [7:0] _0202_;
  wire [7:0] _0203_;
  wire [7:0] _0204_;
  wire [7:0] _0205_;
  wire [7:0] _0206_;
  wire [7:0] _0207_;
  wire [7:0] _0208_;
  wire [7:0] _0209_;
  wire [7:0] _0210_;
  wire [7:0] _0211_;
  wire [7:0] _0212_;
  wire [7:0] _0213_;
  wire [7:0] _0214_;
  wire [7:0] _0215_;
  wire [7:0] _0216_;
  wire [7:0] _0217_;
  wire [7:0] _0218_;
  wire [7:0] _0219_;
  wire [7:0] _0220_;
  wire [7:0] _0221_;
  wire [7:0] _0222_;
  wire [7:0] _0223_;
  wire [7:0] _0224_;
  wire [7:0] _0225_;
  wire [7:0] _0226_;
  wire [7:0] _0227_;
  wire [7:0] _0228_;
  wire [7:0] _0229_;
  wire [7:0] _0230_;
  wire [7:0] _0231_;
  wire [7:0] _0232_;
  wire [7:0] _0233_;
  wire [7:0] _0234_;
  wire [7:0] _0235_;
  wire [7:0] _0236_;
  wire [7:0] _0237_;
  wire [7:0] _0238_;
  wire [7:0] _0239_;
  wire [7:0] _0240_;
  wire [7:0] _0241_;
  wire [7:0] _0242_;
  wire [7:0] _0243_;
  wire [7:0] _0244_;
  wire [7:0] _0245_;
  wire [7:0] _0246_;
  wire [7:0] _0247_;
  wire [7:0] _0248_;
  wire [7:0] _0249_;
  wire [7:0] _0250_;
  wire [7:0] _0251_;
  wire [7:0] _0252_;
  wire [7:0] _0253_;
  wire [7:0] _0254_;
  wire [7:0] _0255_;
  wire [7:0] _0256_;
  wire [7:0] _0257_;
  wire [7:0] _0258_;
  wire [7:0] _0259_;
  wire [7:0] _0260_;
  wire [7:0] _0261_;
  wire _0262_;
  wire _0263_;
  wire [7:0] _0264_;
  wire [31:0] _0265_;
  wire [1:0] _0266_;
  wire [31:0] _0267_;
  wire _0268_;
  wire _0269_;
  wire [7:0] _0270_;
  wire [31:0] _0271_;
  wire [7:0] _0272_;
  wire [1:0] _0273_;
  wire [31:0] _0274_;
  wire _0275_;
  wire _0276_;
  wire [31:0] _0277_;
  wire _0278_;
  wire [31:0] _0279_;
  wire _0280_;
  wire [1:0] _0281_;
  wire _0282_;
  wire _0283_;
  wire [7:0] _0284_;
  wire [31:0] _0285_;
  wire _0286_;
  wire [1:0] _0287_;
  wire [31:0] _0288_;
  reg [1:0] _0289_;
  reg [31:0] _0290_ = 32'd0;
  wire _0291_;
  wire [7:0] _0292_;
  wire [2047:0] _0293_;
  reg [2047:0] _0294_ = 2048'h
  reg [7:0] _0295_ = 8'h00;
  reg [31:0] _0296_ = 32'd0;
  wire _0297_;
  wire _0298_;
  reg _0299_ = 1'h0;
  reg _0300_;
  wire [7:0] _0301_;
  wire [7:0] _0302_;
  wire [7:0] _0303_;
  wire [7:0] _0304_;
  wire [7:0] _0305_;
  wire [7:0] _0306_;
  wire [7:0] _0307_;
  wire [7:0] _0308_;
  wire [7:0] _0309_;
  wire [7:0] _0310_;
  wire [7:0] _0311_;
  wire [7:0] _0312_;
  wire [7:0] _0313_;
  wire [7:0] _0314_;
  wire [7:0] _0315_;
  wire [7:0] _0316_;
  wire [7:0] _0317_;
  wire [7:0] _0318_;
  wire [7:0] _0319_;
  wire [7:0] _0320_;
  wire [7:0] _0321_;
  wire [7:0] _0322_;
  wire [7:0] _0323_;
  wire [7:0] _0324_;
  wire [7:0] _0325_;
  wire [7:0] _0326_;
  wire [7:0] _0327_;
  wire [7:0] _0328_;
  wire [7:0] _0329_;
  wire [7:0] _0330_;
  wire [7:0] _0331_;
  wire [7:0] _0332_;
  wire [7:0] _0333_;
  wire [7:0] _0334_;
  wire [7:0] _0335_;
  wire [7:0] _0336_;
  wire [7:0] _0337_;
  wire [7:0] _0338_;
  wire [7:0] _0339_;
  wire [7:0] _0340_;
  wire [7:0] _0341_;
  wire [7:0] _0342_;
  wire [7:0] _0343_;
  wire [7:0] _0344_;
  wire [7:0] _0345_;
  wire [7:0] _0346_;
  wire [7:0] _0347_;
  wire [7:0] _0348_;
  wire [7:0] _0349_;
  wire [7:0] _0350_;
  wire [7:0] _0351_;
  wire [7:0] _0352_;
  wire [7:0] _0353_;
  wire [7:0] _0354_;
  wire [7:0] _0355_;
  wire [7:0] _0356_;
  wire [7:0] _0357_;
  wire [7:0] _0358_;
  wire [7:0] _0359_;
  wire [7:0] _0360_;
  wire [7:0] _0361_;
  wire [7:0] _0362_;
  wire [7:0] _0363_;
  wire [7:0] _0364_;
  wire [7:0] _0365_;
  wire [7:0] _0366_;
  wire [7:0] _0367_;
  wire [7:0] _0368_;
  wire [7:0] _0369_;
  wire [7:0] _0370_;
  wire [7:0] _0371_;
  wire [7:0] _0372_;
  wire [7:0] _0373_;
  wire [7:0] _0374_;
  wire [7:0] _0375_;
  wire [7:0] _0376_;
  wire [7:0] _0377_;
  wire [7:0] _0378_;
  wire [7:0] _0379_;
  wire [7:0] _0380_;
  wire [7:0] _0381_;
  wire [7:0] _0382_;
  wire [7:0] _0383_;
  wire [7:0] _0384_;
  wire [7:0] _0385_;
  wire _0386_;
  wire _0387_;
  wire _0388_;
  wire _0389_;
  wire _0390_;
  wire _0391_;
  wire _0392_;
  wire _0393_;
  wire _0394_;
  wire _0395_;
  wire _0396_;
  wire _0397_;
  wire _0398_;
  wire _0399_;
  wire _0400_;
  wire _0401_;
  wire _0402_;
  wire _0403_;
  wire _0404_;
  wire _0405_;
  wire _0406_;
  wire _0407_;
  wire _0408_;
  wire _0409_;
  wire _0410_;
  wire _0411_;
  wire _0412_;
  wire _0413_;
  wire _0414_;
  wire _0415_;
  wire _0416_;
  wire _0417_;
  wire _0418_;
  wire _0419_;
  wire _0420_;
  wire _0421_;
  wire _0422_;
  wire _0423_;
  wire _0424_;
  wire _0425_;
  wire _0426_;
  wire _0427_;
  wire _0428_;
  wire _0429_;
  wire _0430_;
  wire _0431_;
  wire _0432_;
  wire _0433_;
  wire _0434_;
  wire _0435_;
  wire _0436_;
  wire _0437_;
  wire _0438_;
  wire _0439_;
  wire _0440_;
  wire _0441_;
  wire _0442_;
  wire _0443_;
  wire _0444_;
  wire _0445_;
  wire _0446_;
  wire _0447_;
  wire _0448_;
  wire _0449_;
  wire _0450_;
  wire _0451_;
  wire _0452_;
  wire _0453_;
  wire _0454_;
  wire _0455_;
  wire _0456_;
  wire _0457_;
  wire _0458_;
  wire _0459_;
  wire _0460_;
  wire _0461_;
  wire _0462_;
  wire _0463_;
  wire _0464_;
  wire _0465_;
  wire _0466_;
  wire _0467_;
  wire _0468_;
  wire _0469_;
  wire _0470_;
  wire _0471_;
  wire _0472_;
  wire _0473_;
  wire _0474_;
  wire _0475_;
  wire _0476_;
  wire _0477_;
  wire _0478_;
  wire _0479_;
  wire _0480_;
  wire _0481_;
  wire _0482_;
  wire _0483_;
  wire _0484_;
  wire _0485_;
  wire _0486_;
  wire _0487_;
  wire _0488_;
  wire _0489_;
  wire _0490_;
  wire _0491_;
  wire _0492_;
  wire _0493_;
  wire _0494_;
  wire _0495_;
  wire _0496_;
  wire _0497_;
  wire _0498_;
  wire _0499_;
  wire _0500_;
  wire _0501_;
  wire _0502_;
  wire _0503_;
  wire _0504_;
  wire _0505_;
  wire _0506_;
  wire _0507_;
  wire _0508_;
  wire _0509_;
  wire _0510_;
  wire _0511_;
  wire _0512_;
  wire _0513_;
  wire _0514_;
  wire _0515_;
  wire _0516_;
  wire _0517_;
  wire _0518_;
  wire _0519_;
  wire _0520_;
  wire _0521_;
  wire _0522_;
  wire _0523_;
  wire _0524_;
  wire _0525_;
  wire _0526_;
  wire _0527_;
  wire _0528_;
  wire _0529_;
  wire _0530_;
  wire _0531_;
  wire _0532_;
  wire _0533_;
  wire _0534_;
  wire _0535_;
  wire _0536_;
  wire _0537_;
  wire _0538_;
  wire _0539_;
  wire _0540_;
  wire _0541_;
  wire _0542_;
  wire _0543_;
  wire _0544_;
  wire _0545_;
  wire _0546_;
  wire _0547_;
  wire _0548_;
  wire _0549_;
  wire _0550_;
  wire _0551_;
  wire _0552_;
  wire _0553_;
  wire _0554_;
  wire _0555_;
  wire _0556_;
  wire _0557_;
  wire _0558_;
  wire _0559_;
  wire _0560_;
  wire _0561_;
  wire _0562_;
  wire _0563_;
  wire _0564_;
  wire _0565_;
  wire _0566_;
  wire _0567_;
  wire _0568_;
  wire _0569_;
  wire _0570_;
  wire _0571_;
  wire _0572_;
  wire _0573_;
  wire _0574_;
  wire _0575_;
  wire _0576_;
  wire _0577_;
  wire _0578_;
  wire _0579_;
  wire _0580_;
  wire _0581_;
  wire _0582_;
  wire _0583_;
  wire _0584_;
  wire _0585_;
  wire _0586_;
  wire _0587_;
  wire _0588_;
  wire _0589_;
  wire _0590_;
  wire _0591_;
  wire _0592_;
  wire _0593_;
  wire _0594_;
  wire _0595_;
  wire _0596_;
  wire _0597_;
  wire _0598_;
  wire _0599_;
  wire _0600_;
  wire _0601_;
  wire _0602_;
  wire _0603_;
  wire _0604_;
  wire _0605_;
  wire _0606_;
  wire _0607_;
  wire _0608_;
  wire _0609_;
  wire _0610_;
  wire _0611_;
  wire _0612_;
  wire _0613_;
  wire _0614_;
  wire _0615_;
  wire _0616_;
  wire _0617_;
  wire _0618_;
  wire _0619_;
  wire _0620_;
  wire _0621_;
  wire _0622_;
  wire _0623_;
  wire _0624_;
  wire _0625_;
  wire _0626_;
  wire _0627_;
  wire _0628_;
  wire _0629_;
  wire _0630_;
  wire _0631_;
  wire _0632_;
  wire _0633_;
  wire _0634_;
  wire _0635_;
  wire _0636_;
  wire _0637_;
  wire _0638_;
  wire _0639_;
  wire _0640_;
  wire _0641_;
  wire _0642_;
  wire _0643_;
  wire _0644_;
  wire _0645_;
  wire _0646_;
  wire _0647_;
  wire _0648_;
  wire _0649_;
  wire _0650_;
  wire _0651_;
  wire _0652_;
  wire _0653_;
  wire _0654_;
  wire _0655_;
  wire _0656_;
  wire _0657_;
  wire _0658_;
  wire _0659_;
  wire _0660_;
  wire _0661_;
  wire _0662_;
  wire _0663_;
  wire _0664_;
  wire _0665_;
  wire _0666_;
  wire _0667_;
  wire _0668_;
  wire _0669_;
  wire _0670_;
  wire _0671_;
  wire _0672_;
  wire _0673_;
  wire _0674_;
  wire _0675_;
  wire _0676_;
  wire _0677_;
  wire _0678_;
  wire _0679_;
  wire _0680_;
  wire _0681_;
  wire _0682_;
  wire _0683_;
  wire _0684_;
  wire _0685_;
  wire _0686_;
  wire _0687_;
  wire _0688_;
  wire _0689_;
  wire _0690_;
  wire _0691_;
  wire _0692_;
  wire _0693_;
  wire _0694_;
  wire _0695_;
  wire _0696_;
  wire _0697_;
  wire _0698_;
  wire _0699_;
  wire _0700_;
  wire _0701_;
  wire _0702_;
  wire _0703_;
  wire _0704_;
  wire _0705_;
  wire _0706_;
  wire _0707_;
  wire _0708_;
  wire _0709_;
  wire _0710_;
  wire _0711_;
  wire _0712_;
  wire _0713_;
  wire _0714_;
  wire _0715_;
  wire _0716_;
  wire _0717_;
  wire _0718_;
  wire _0719_;
  wire _0720_;
  wire _0721_;
  wire _0722_;
  wire _0723_;
  wire _0724_;
  wire _0725_;
  wire _0726_;
  wire _0727_;
  wire _0728_;
  wire _0729_;
  wire _0730_;
  wire _0731_;
  wire _0732_;
  wire _0733_;
  wire _0734_;
  wire _0735_;
  wire _0736_;
  wire _0737_;
  wire _0738_;
  wire _0739_;
  wire _0740_;
  wire _0741_;
  wire _0742_;
  wire _0743_;
  wire _0744_;
  wire _0745_;
  wire _0746_;
  wire _0747_;
  wire _0748_;
  wire _0749_;
  wire _0750_;
  wire _0751_;
  wire _0752_;
  wire _0753_;
  wire _0754_;
  wire _0755_;
  wire _0756_;
  wire _0757_;
  wire _0758_;
  wire _0759_;
  wire _0760_;
  wire _0761_;
  wire _0762_;
  wire _0763_;
  wire _0764_;
  wire _0765_;
  wire _0766_;
  wire _0767_;
  wire _0768_;
  wire _0769_;
  wire _0770_;
  wire _0771_;
  wire _0772_;
  wire _0773_;
  wire _0774_;
  wire _0775_;
  wire _0776_;
  wire _0777_;
  wire _0778_;
  wire _0779_;
  wire _0780_;
  wire _0781_;
  wire _0782_;
  wire _0783_;
  wire _0784_;
  wire _0785_;
  wire _0786_;
  wire _0787_;
  wire _0788_;
  wire _0789_;
  wire _0790_;
  wire _0791_;
  wire _0792_;
  wire _0793_;
  wire _0794_;
  wire _0795_;
  wire _0796_;
  wire _0797_;
  wire _0798_;
  wire _0799_;
  wire _0800_;
  wire _0801_;
  wire _0802_;
  wire _0803_;
  wire _0804_;
  wire _0805_;
  wire _0806_;
  wire _0807_;
  wire _0808_;
  wire _0809_;
  wire _0810_;
  wire _0811_;
  wire _0812_;
  wire _0813_;
  wire _0814_;
  wire _0815_;
  wire _0816_;
  wire _0817_;
  wire _0818_;
  wire _0819_;
  wire _0820_;
  wire _0821_;
  wire _0822_;
  wire _0823_;
  wire _0824_;
  wire _0825_;
  wire _0826_;
  wire _0827_;
  wire _0828_;
  wire _0829_;
  wire _0830_;
  wire _0831_;
  wire _0832_;
  wire _0833_;
  wire _0834_;
  wire _0835_;
  wire _0836_;
  wire _0837_;
  wire _0838_;
  wire _0839_;
  wire _0840_;
  wire _0841_;
  wire _0842_;
  wire _0843_;
  wire _0844_;
  wire _0845_;
  wire _0846_;
  wire _0847_;
  wire _0848_;
  wire _0849_;
  wire _0850_;
  wire _0851_;
  wire _0852_;
  wire _0853_;
  wire _0854_;
  wire _0855_;
  wire _0856_;
  wire _0857_;
  wire _0858_;
  wire _0859_;
  wire _0860_;
  wire _0861_;
  wire _0862_;
  wire _0863_;
  wire _0864_;
  wire _0865_;
  wire _0866_;
  wire _0867_;
  wire _0868_;
  wire _0869_;
  wire _0870_;
  wire _0871_;
  wire _0872_;
  wire _0873_;
  wire _0874_;
  wire _0875_;
  wire _0876_;
  wire _0877_;
  wire _0878_;
  wire _0879_;
  wire _0880_;
  wire _0881_;
  wire _0882_;
  wire _0883_;
  wire _0884_;
  wire _0885_;
  wire _0886_;
  wire _0887_;
  wire _0888_;
  wire _0889_;
  wire _0890_;
  wire _0891_;
  wire _0892_;
  wire _0893_;
  wire _0894_;
  wire _0895_;
  wire _0896_;
  wire _0897_;
  wire _0898_;
  wire _0899_;
  wire _0900_;
  wire _0901_;
  wire _0902_;
  wire _0903_;
  wire _0904_;
  wire [7:0] _0905_;
  wire [7:0] _0906_;
  wire [7:0] _0907_;
  wire [7:0] _0908_;
  wire [7:0] _0909_;
  wire [7:0] _0910_;
  wire [7:0] _0911_;
  wire [7:0] _0912_;
  wire [7:0] _0913_;
  wire [7:0] _0914_;
  wire [7:0] _0915_;
  wire [7:0] _0916_;
  wire [7:0] _0917_;
  wire [7:0] _0918_;
  wire [7:0] _0919_;
  wire [7:0] _0920_;
  wire [7:0] _0921_;
  wire [7:0] _0922_;
  wire [7:0] _0923_;
  wire [7:0] _0924_;
  wire [7:0] _0925_;
  wire [7:0] _0926_;
  wire [7:0] _0927_;
  wire [7:0] _0928_;
  wire [7:0] _0929_;
  wire [7:0] _0930_;
  wire [7:0] _0931_;
  wire [7:0] _0932_;
  wire [7:0] _0933_;
  wire [7:0] _0934_;
  wire [7:0] _0935_;
  wire [7:0] _0936_;
  wire [7:0] _0937_;
  wire [7:0] _0938_;
  wire [7:0] _0939_;
  wire [7:0] _0940_;
  wire [7:0] _0941_;
  wire [7:0] _0942_;
  wire [7:0] _0943_;
  wire [7:0] _0944_;
  wire [7:0] _0945_;
  wire [7:0] _0946_;
  wire [7:0] _0947_;
  wire [7:0] _0948_;
  wire [7:0] _0949_;
  wire [7:0] _0950_;
  wire [7:0] _0951_;
  wire [7:0] _0952_;
  wire [7:0] _0953_;
  wire [7:0] _0954_;
  wire [7:0] _0955_;
  wire [7:0] _0956_;
  wire [7:0] _0957_;
  wire [7:0] _0958_;
  wire [7:0] _0959_;
  wire [7:0] _0960_;
  wire [7:0] _0961_;
  wire [7:0] _0962_;
  wire [7:0] _0963_;
  wire [7:0] _0964_;
  wire [7:0] _0965_;
  wire [7:0] _0966_;
  wire [7:0] _0967_;
  wire [7:0] _0968_;
  wire [7:0] _0969_;
  wire [7:0] _0970_;
  wire [7:0] _0971_;
  wire [7:0] _0972_;
  wire [7:0] _0973_;
  wire [7:0] _0974_;
  wire [7:0] _0975_;
  wire [7:0] _0976_;
  wire [7:0] _0977_;
  wire [7:0] _0978_;
  wire [7:0] _0979_;
  wire [7:0] _0980_;
  wire [7:0] _0981_;
  wire [7:0] _0982_;
  wire [7:0] _0983_;
  wire [7:0] _0984_;
  wire [7:0] _0985_;
  wire [7:0] _0986_;
  wire [7:0] _0987_;
  wire [7:0] _0988_;
  wire [7:0] _0989_;
  wire [7:0] _0990_;
  wire [7:0] _0991_;
  wire [7:0] _0992_;
  wire [7:0] _0993_;
  wire [7:0] _0994_;
  wire [7:0] _0995_;
  wire [7:0] _0996_;
  wire [7:0] _0997_;
  wire [7:0] _0998_;
  wire [7:0] _0999_;
  wire [7:0] _1000_;
  wire [7:0] _1001_;
  wire [7:0] _1002_;
  wire [7:0] _1003_;
  wire [7:0] _1004_;
  wire [7:0] _1005_;
  wire [7:0] _1006_;
  wire [7:0] _1007_;
  wire [7:0] _1008_;
  wire [7:0] _1009_;
  wire [7:0] _1010_;
  wire [7:0] _1011_;
  wire [7:0] _1012_;
  wire [7:0] _1013_;
  wire [7:0] _1014_;
  wire [7:0] _1015_;
  wire [7:0] _1016_;
  wire [7:0] _1017_;
  wire [7:0] _1018_;
  wire [7:0] _1019_;
  wire [7:0] _1020_;
  wire [7:0] _1021_;
  wire [7:0] _1022_;
  wire [7:0] _1023_;
  wire [7:0] _1024_;
  wire [7:0] _1025_;
  wire [7:0] _1026_;
  wire [7:0] _1027_;
  wire [7:0] _1028_;
  wire [7:0] _1029_;
  wire [7:0] _1030_;
  wire [7:0] _1031_;
  wire [7:0] _1032_;
  wire [7:0] _1033_;
  wire [7:0] _1034_;
  wire [7:0] _1035_;
  wire [7:0] _1036_;
  wire [7:0] _1037_;
  wire [7:0] _1038_;
  wire [7:0] _1039_;
  wire [7:0] _1040_;
  wire [7:0] _1041_;
  wire [7:0] _1042_;
  wire [7:0] _1043_;
  wire [7:0] _1044_;
  wire [7:0] _1045_;
  wire [7:0] _1046_;
  wire [7:0] _1047_;
  wire [7:0] _1048_;
  wire [7:0] _1049_;
  wire [7:0] _1050_;
  wire [7:0] _1051_;
  wire [7:0] _1052_;
  wire [7:0] _1053_;
  wire [7:0] _1054_;
  wire [7:0] _1055_;
  wire [7:0] _1056_;
  wire [7:0] _1057_;
  wire [7:0] _1058_;
  wire [7:0] _1059_;
  wire [7:0] _1060_;
  wire [7:0] _1061_;
  wire [7:0] _1062_;
  wire [7:0] _1063_;
  wire [7:0] _1064_;
  wire [7:0] _1065_;
  wire [7:0] _1066_;
  wire [7:0] _1067_;
  wire [7:0] _1068_;
  wire [7:0] _1069_;
  wire [7:0] _1070_;
  wire [7:0] _1071_;
  wire [7:0] _1072_;
  wire data_out_temp;
  input [7:0] m_address;
  wire [7:0] m_address;
  input m_clock;
  wire m_clock;
  output m_data_dump;
  wire m_data_dump;
  input [7:0] m_datain;
  wire [7:0] m_datain;
  input m_reset;
  wire m_reset;
  input m_start_dump;
  wire m_start_dump;
  input m_write_e;
  wire m_write_e;
  wire [2047:0] ram;
  wire [31:0] shift_counter;
  wire [7:0] shift_reg;
  wire [31:0] \statemachine.counter ;
  wire [1:0] \statemachine.current_state ;
  assign _0000_ = _0270_[0] ? ram[15:8] : ram[7:0];
  assign _0001_ = _0270_[0] ? ram[47:40] : ram[39:32];
  assign _0002_ = _0270_[0] ? ram[79:72] : ram[71:64];
  assign _0003_ = _0270_[0] ? ram[111:104] : ram[103:96];
  assign _0004_ = _0270_[0] ? ram[143:136] : ram[135:128];
  assign _0005_ = _0270_[0] ? ram[175:168] : ram[167:160];
  assign _0006_ = _0270_[0] ? ram[207:200] : ram[199:192];
  assign _0007_ = _0270_[0] ? ram[239:232] : ram[231:224];
  assign _0008_ = _0270_[0] ? ram[271:264] : ram[263:256];
  assign _0009_ = _0270_[0] ? ram[303:296] : ram[295:288];
  assign _0010_ = _0270_[0] ? ram[335:328] : ram[327:320];
  assign _0011_ = _0270_[0] ? ram[367:360] : ram[359:352];
  assign _0012_ = _0270_[0] ? ram[399:392] : ram[391:384];
  assign _0013_ = _0270_[0] ? ram[431:424] : ram[423:416];
  assign _0014_ = _0270_[0] ? ram[463:456] : ram[455:448];
  assign _0015_ = _0270_[0] ? ram[495:488] : ram[487:480];
  assign _0016_ = _0270_[0] ? ram[527:520] : ram[519:512];
  assign _0017_ = _0270_[0] ? ram[559:552] : ram[551:544];
  assign _0018_ = _0270_[0] ? ram[591:584] : ram[583:576];
  assign _0019_ = _0270_[0] ? ram[623:616] : ram[615:608];
  assign _0020_ = _0270_[0] ? ram[655:648] : ram[647:640];
  assign _0021_ = _0270_[0] ? ram[687:680] : ram[679:672];
  assign _0022_ = _0270_[0] ? ram[719:712] : ram[711:704];
  assign _0023_ = _0270_[0] ? ram[751:744] : ram[743:736];
  assign _0024_ = _0270_[0] ? ram[783:776] : ram[775:768];
  assign _0025_ = _0270_[0] ? ram[815:808] : ram[807:800];
  assign _0026_ = _0270_[0] ? ram[847:840] : ram[839:832];
  assign _0027_ = _0270_[0] ? ram[879:872] : ram[871:864];
  assign _0028_ = _0270_[0] ? ram[911:904] : ram[903:896];
  assign _0029_ = _0270_[0] ? ram[943:936] : ram[935:928];
  assign _0030_ = _0270_[0] ? ram[975:968] : ram[967:960];
  assign _0031_ = _0270_[0] ? ram[1007:1000] : ram[999:992];
  assign _0032_ = _0270_[0] ? ram[1039:1032] : ram[1031:1024];
  assign _0033_ = _0270_[0] ? ram[1071:1064] : ram[1063:1056];
  assign _0034_ = _0270_[0] ? ram[1103:1096] : ram[1095:1088];
  assign _0035_ = _0270_[0] ? ram[1135:1128] : ram[1127:1120];
  assign _0036_ = _0270_[0] ? ram[1167:1160] : ram[1159:1152];
  assign _0037_ = _0270_[0] ? ram[1199:1192] : ram[1191:1184];
  assign _0038_ = _0270_[0] ? ram[1231:1224] : ram[1223:1216];
  assign _0039_ = _0270_[0] ? ram[1263:1256] : ram[1255:1248];
  assign _0040_ = _0270_[0] ? ram[1295:1288] : ram[1287:1280];
  assign _0041_ = _0270_[0] ? ram[1327:1320] : ram[1319:1312];
  assign _0042_ = _0270_[0] ? ram[1359:1352] : ram[1351:1344];
  assign _0043_ = _0270_[0] ? ram[1391:1384] : ram[1383:1376];
  assign _0044_ = _0270_[0] ? ram[1423:1416] : ram[1415:1408];
  assign _0045_ = _0270_[0] ? ram[1455:1448] : ram[1447:1440];
  assign _0046_ = _0270_[0] ? ram[1487:1480] : ram[1479:1472];
  assign _0047_ = _0270_[0] ? ram[1519:1512] : ram[1511:1504];
  assign _0048_ = _0270_[0] ? ram[1551:1544] : ram[1543:1536];
  assign _0049_ = _0270_[0] ? ram[1583:1576] : ram[1575:1568];
  assign _0050_ = _0270_[0] ? ram[1615:1608] : ram[1607:1600];
  assign _0051_ = _0270_[0] ? ram[1647:1640] : ram[1639:1632];
  assign _0052_ = _0270_[0] ? ram[1679:1672] : ram[1671:1664];
  assign _0053_ = _0270_[0] ? ram[1711:1704] : ram[1703:1696];
  assign _0054_ = _0270_[0] ? ram[1743:1736] : ram[1735:1728];
  assign _0055_ = _0270_[0] ? ram[1775:1768] : ram[1767:1760];
  assign _0056_ = _0270_[0] ? ram[1807:1800] : ram[1799:1792];
  assign _0057_ = _0270_[0] ? ram[1839:1832] : ram[1831:1824];
  assign _0058_ = _0270_[0] ? ram[1871:1864] : ram[1863:1856];
  assign _0059_ = _0270_[0] ? ram[1903:1896] : ram[1895:1888];
  assign _0060_ = _0270_[0] ? ram[1935:1928] : ram[1927:1920];
  assign _0061_ = _0270_[0] ? ram[1967:1960] : ram[1959:1952];
  assign _0062_ = _0270_[0] ? ram[1999:1992] : ram[1991:1984];
  assign _0063_ = _0270_[0] ? ram[2031:2024] : ram[2023:2016];
  assign _0064_ = _0270_[2] ? _0302_ : _0301_;
  assign _0065_ = _0270_[2] ? _0306_ : _0305_;
  assign _0066_ = _0270_[2] ? _0310_ : _0309_;
  assign _0067_ = _0270_[2] ? _0314_ : _0313_;
  assign _0068_ = _0270_[2] ? _0318_ : _0317_;
  assign _0069_ = _0270_[2] ? _0322_ : _0321_;
  assign _0070_ = _0270_[2] ? _0326_ : _0325_;
  assign _0071_ = _0270_[2] ? _0330_ : _0329_;
  assign _0072_ = _0270_[2] ? _0334_ : _0333_;
  assign _0073_ = _0270_[2] ? _0338_ : _0337_;
  assign _0074_ = _0270_[2] ? _0342_ : _0341_;
  assign _0075_ = _0270_[2] ? _0346_ : _0345_;
  assign _0076_ = _0270_[2] ? _0350_ : _0349_;
  assign _0077_ = _0270_[2] ? _0354_ : _0353_;
  assign _0078_ = _0270_[2] ? _0358_ : _0357_;
  assign _0079_ = _0270_[2] ? _0362_ : _0361_;
  assign _0080_ = _0270_[4] ? _0366_ : _0365_;
  assign _0081_ = _0270_[4] ? _0370_ : _0369_;
  assign _0082_ = _0270_[4] ? _0374_ : _0373_;
  assign _0083_ = _0270_[4] ? _0378_ : _0377_;
  assign _0084_ = _0270_[6] ? _0382_ : _0381_;
  assign _0085_ = shift_counter[0] ? shift_reg[1] : shift_reg[0];
  assign _0086_ = shift_counter[0] ? shift_reg[5] : shift_reg[4];
  assign _0087_ = _0270_[0] ? ram[31:24] : ram[23:16];
  assign _0088_ = _0270_[0] ? ram[63:56] : ram[55:48];
  assign _0089_ = _0270_[0] ? ram[95:88] : ram[87:80];
  assign _0090_ = _0270_[0] ? ram[127:120] : ram[119:112];
  assign _0091_ = _0270_[0] ? ram[159:152] : ram[151:144];
  assign _0092_ = _0270_[0] ? ram[191:184] : ram[183:176];
  assign _0093_ = _0270_[0] ? ram[223:216] : ram[215:208];
  assign _0094_ = _0270_[0] ? ram[255:248] : ram[247:240];
  assign _0095_ = _0270_[0] ? ram[287:280] : ram[279:272];
  assign _0096_ = _0270_[0] ? ram[319:312] : ram[311:304];
  assign _0097_ = _0270_[0] ? ram[351:344] : ram[343:336];
  assign _0098_ = _0270_[0] ? ram[383:376] : ram[375:368];
  assign _0099_ = _0270_[0] ? ram[415:408] : ram[407:400];
  assign _0100_ = _0270_[0] ? ram[447:440] : ram[439:432];
  assign _0101_ = _0270_[0] ? ram[479:472] : ram[471:464];
  assign _0102_ = _0270_[0] ? ram[511:504] : ram[503:496];
  assign _0103_ = _0270_[0] ? ram[543:536] : ram[535:528];
  assign _0104_ = _0270_[0] ? ram[575:568] : ram[567:560];
  assign _0105_ = _0270_[0] ? ram[607:600] : ram[599:592];
  assign _0106_ = _0270_[0] ? ram[639:632] : ram[631:624];
  assign _0107_ = _0270_[0] ? ram[671:664] : ram[663:656];
  assign _0108_ = _0270_[0] ? ram[703:696] : ram[695:688];
  assign _0109_ = _0270_[0] ? ram[735:728] : ram[727:720];
  assign _0110_ = _0270_[0] ? ram[767:760] : ram[759:752];
  assign _0111_ = _0270_[0] ? ram[799:792] : ram[791:784];
  assign _0112_ = _0270_[0] ? ram[831:824] : ram[823:816];
  assign _0113_ = _0270_[0] ? ram[863:856] : ram[855:848];
  assign _0114_ = _0270_[0] ? ram[895:888] : ram[887:880];
  assign _0115_ = _0270_[0] ? ram[927:920] : ram[919:912];
  assign _0116_ = _0270_[0] ? ram[959:952] : ram[951:944];
  assign _0117_ = _0270_[0] ? ram[991:984] : ram[983:976];
  assign _0118_ = _0270_[0] ? ram[1023:1016] : ram[1015:1008];
  assign _0119_ = _0270_[0] ? ram[1055:1048] : ram[1047:1040];
  assign _0120_ = _0270_[0] ? ram[1087:1080] : ram[1079:1072];
  assign _0121_ = _0270_[0] ? ram[1119:1112] : ram[1111:1104];
  assign _0122_ = _0270_[0] ? ram[1151:1144] : ram[1143:1136];
  assign _0123_ = _0270_[0] ? ram[1183:1176] : ram[1175:1168];
  assign _0124_ = _0270_[0] ? ram[1215:1208] : ram[1207:1200];
  assign _0125_ = _0270_[0] ? ram[1247:1240] : ram[1239:1232];
  assign _0126_ = _0270_[0] ? ram[1279:1272] : ram[1271:1264];
  assign _0127_ = _0270_[0] ? ram[1311:1304] : ram[1303:1296];
  assign _0128_ = _0270_[0] ? ram[1343:1336] : ram[1335:1328];
  assign _0129_ = _0270_[0] ? ram[1375:1368] : ram[1367:1360];
  assign _0130_ = _0270_[0] ? ram[1407:1400] : ram[1399:1392];
  assign _0131_ = _0270_[0] ? ram[1439:1432] : ram[1431:1424];
  assign _0132_ = _0270_[0] ? ram[1471:1464] : ram[1463:1456];
  assign _0133_ = _0270_[0] ? ram[1503:1496] : ram[1495:1488];
  assign _0134_ = _0270_[0] ? ram[1535:1528] : ram[1527:1520];
  assign _0135_ = _0270_[0] ? ram[1567:1560] : ram[1559:1552];
  assign _0136_ = _0270_[0] ? ram[1599:1592] : ram[1591:1584];
  assign _0137_ = _0270_[0] ? ram[1631:1624] : ram[1623:1616];
  assign _0138_ = _0270_[0] ? ram[1663:1656] : ram[1655:1648];
  assign _0139_ = _0270_[0] ? ram[1695:1688] : ram[1687:1680];
  assign _0140_ = _0270_[0] ? ram[1727:1720] : ram[1719:1712];
  assign _0141_ = _0270_[0] ? ram[1759:1752] : ram[1751:1744];
  assign _0142_ = _0270_[0] ? ram[1791:1784] : ram[1783:1776];
  assign _0143_ = _0270_[0] ? ram[1823:1816] : ram[1815:1808];
  assign _0144_ = _0270_[0] ? ram[1855:1848] : ram[1847:1840];
  assign _0145_ = _0270_[0] ? ram[1887:1880] : ram[1879:1872];
  assign _0146_ = _0270_[0] ? ram[1919:1912] : ram[1911:1904];
  assign _0147_ = _0270_[0] ? ram[1951:1944] : ram[1943:1936];
  assign _0148_ = _0270_[0] ? ram[1983:1976] : ram[1975:1968];
  assign _0149_ = _0270_[0] ? ram[2015:2008] : ram[2007:2000];
  assign _0150_ = _0270_[0] ? ram[2047:2040] : ram[2039:2032];
  assign _0151_ = _0270_[2] ? _0304_ : _0303_;
  assign _0152_ = _0270_[2] ? _0308_ : _0307_;
  assign _0153_ = _0270_[2] ? _0312_ : _0311_;
  assign _0154_ = _0270_[2] ? _0316_ : _0315_;
  assign _0155_ = _0270_[2] ? _0320_ : _0319_;
  assign _0156_ = _0270_[2] ? _0324_ : _0323_;
  assign _0157_ = _0270_[2] ? _0328_ : _0327_;
  assign _0158_ = _0270_[2] ? _0332_ : _0331_;
  assign _0159_ = _0270_[2] ? _0336_ : _0335_;
  assign _0160_ = _0270_[2] ? _0340_ : _0339_;
  assign _0161_ = _0270_[2] ? _0344_ : _0343_;
  assign _0162_ = _0270_[2] ? _0348_ : _0347_;
  assign _0163_ = _0270_[2] ? _0352_ : _0351_;
  assign _0164_ = _0270_[2] ? _0356_ : _0355_;
  assign _0165_ = _0270_[2] ? _0360_ : _0359_;
  assign _0166_ = _0270_[2] ? _0364_ : _0363_;
  assign _0167_ = _0270_[4] ? _0368_ : _0367_;
  assign _0168_ = _0270_[4] ? _0372_ : _0371_;
  assign _0169_ = _0270_[4] ? _0376_ : _0375_;
  assign _0170_ = _0270_[4] ? _0380_ : _0379_;
  assign _0171_ = _0270_[6] ? _0384_ : _0383_;
  assign _0172_ = shift_counter[0] ? shift_reg[3] : shift_reg[2];
  assign _0173_ = shift_counter[0] ? shift_reg[7] : shift_reg[6];
  assign _0301_ = _0270_[1] ? _0087_ : _0000_;
  assign _0302_ = _0270_[1] ? _0088_ : _0001_;
  assign _0303_ = _0270_[1] ? _0089_ : _0002_;
  assign _0304_ = _0270_[1] ? _0090_ : _0003_;
  assign _0305_ = _0270_[1] ? _0091_ : _0004_;
  assign _0306_ = _0270_[1] ? _0092_ : _0005_;
  assign _0307_ = _0270_[1] ? _0093_ : _0006_;
  assign _0308_ = _0270_[1] ? _0094_ : _0007_;
  assign _0309_ = _0270_[1] ? _0095_ : _0008_;
  assign _0310_ = _0270_[1] ? _0096_ : _0009_;
  assign _0311_ = _0270_[1] ? _0097_ : _0010_;
  assign _0312_ = _0270_[1] ? _0098_ : _0011_;
  assign _0313_ = _0270_[1] ? _0099_ : _0012_;
  assign _0314_ = _0270_[1] ? _0100_ : _0013_;
  assign _0315_ = _0270_[1] ? _0101_ : _0014_;
  assign _0316_ = _0270_[1] ? _0102_ : _0015_;
  assign _0317_ = _0270_[1] ? _0103_ : _0016_;
  assign _0318_ = _0270_[1] ? _0104_ : _0017_;
  assign _0319_ = _0270_[1] ? _0105_ : _0018_;
  assign _0320_ = _0270_[1] ? _0106_ : _0019_;
  assign _0321_ = _0270_[1] ? _0107_ : _0020_;
  assign _0322_ = _0270_[1] ? _0108_ : _0021_;
  assign _0323_ = _0270_[1] ? _0109_ : _0022_;
  assign _0324_ = _0270_[1] ? _0110_ : _0023_;
  assign _0325_ = _0270_[1] ? _0111_ : _0024_;
  assign _0326_ = _0270_[1] ? _0112_ : _0025_;
  assign _0327_ = _0270_[1] ? _0113_ : _0026_;
  assign _0328_ = _0270_[1] ? _0114_ : _0027_;
  assign _0329_ = _0270_[1] ? _0115_ : _0028_;
  assign _0330_ = _0270_[1] ? _0116_ : _0029_;
  assign _0331_ = _0270_[1] ? _0117_ : _0030_;
  assign _0332_ = _0270_[1] ? _0118_ : _0031_;
  assign _0333_ = _0270_[1] ? _0119_ : _0032_;
  assign _0334_ = _0270_[1] ? _0120_ : _0033_;
  assign _0335_ = _0270_[1] ? _0121_ : _0034_;
  assign _0336_ = _0270_[1] ? _0122_ : _0035_;
  assign _0337_ = _0270_[1] ? _0123_ : _0036_;
  assign _0338_ = _0270_[1] ? _0124_ : _0037_;
  assign _0339_ = _0270_[1] ? _0125_ : _0038_;
  assign _0340_ = _0270_[1] ? _0126_ : _0039_;
  assign _0341_ = _0270_[1] ? _0127_ : _0040_;
  assign _0342_ = _0270_[1] ? _0128_ : _0041_;
  assign _0343_ = _0270_[1] ? _0129_ : _0042_;
  assign _0344_ = _0270_[1] ? _0130_ : _0043_;
  assign _0345_ = _0270_[1] ? _0131_ : _0044_;
  assign _0346_ = _0270_[1] ? _0132_ : _0045_;
  assign _0347_ = _0270_[1] ? _0133_ : _0046_;
  assign _0348_ = _0270_[1] ? _0134_ : _0047_;
  assign _0349_ = _0270_[1] ? _0135_ : _0048_;
  assign _0350_ = _0270_[1] ? _0136_ : _0049_;
  assign _0351_ = _0270_[1] ? _0137_ : _0050_;
  assign _0352_ = _0270_[1] ? _0138_ : _0051_;
  assign _0353_ = _0270_[1] ? _0139_ : _0052_;
  assign _0354_ = _0270_[1] ? _0140_ : _0053_;
  assign _0355_ = _0270_[1] ? _0141_ : _0054_;
  assign _0356_ = _0270_[1] ? _0142_ : _0055_;
  assign _0357_ = _0270_[1] ? _0143_ : _0056_;
  assign _0358_ = _0270_[1] ? _0144_ : _0057_;
  assign _0359_ = _0270_[1] ? _0145_ : _0058_;
  assign _0360_ = _0270_[1] ? _0146_ : _0059_;
  assign _0361_ = _0270_[1] ? _0147_ : _0060_;
  assign _0362_ = _0270_[1] ? _0148_ : _0061_;
  assign _0363_ = _0270_[1] ? _0149_ : _0062_;
  assign _0364_ = _0270_[1] ? _0150_ : _0063_;
  assign _0365_ = _0270_[3] ? _0151_ : _0064_;
  assign _0366_ = _0270_[3] ? _0152_ : _0065_;
  assign _0367_ = _0270_[3] ? _0153_ : _0066_;
  assign _0368_ = _0270_[3] ? _0154_ : _0067_;
  assign _0369_ = _0270_[3] ? _0155_ : _0068_;
  assign _0370_ = _0270_[3] ? _0156_ : _0069_;
  assign _0371_ = _0270_[3] ? _0157_ : _0070_;
  assign _0372_ = _0270_[3] ? _0158_ : _0071_;
  assign _0373_ = _0270_[3] ? _0159_ : _0072_;
  assign _0374_ = _0270_[3] ? _0160_ : _0073_;
  assign _0375_ = _0270_[3] ? _0161_ : _0074_;
  assign _0376_ = _0270_[3] ? _0162_ : _0075_;
  assign _0377_ = _0270_[3] ? _0163_ : _0076_;
  assign _0378_ = _0270_[3] ? _0164_ : _0077_;
  assign _0379_ = _0270_[3] ? _0165_ : _0078_;
  assign _0380_ = _0270_[3] ? _0166_ : _0079_;
  assign _0381_ = _0270_[5] ? _0167_ : _0080_;
  assign _0382_ = _0270_[5] ? _0168_ : _0081_;
  assign _0383_ = _0270_[5] ? _0169_ : _0082_;
  assign _0384_ = _0270_[5] ? _0170_ : _0083_;
  assign _0385_ = _0270_[7] ? _0171_ : _0084_;
  assign _0386_ = shift_counter[1] ? _0172_ : _0085_;
  assign _0387_ = shift_counter[1] ? _0173_ : _0086_;
  assign _0388_ = shift_counter[2] ? _0387_ : _0386_;
  assign _0389_ = ~ _0292_[7];
  assign _0390_ = ~ _0292_[6];
  assign _0391_ = _0389_ & _0390_;
  assign _0392_ = _0389_ & _0292_[6];
  assign _0393_ = _0292_[7] & _0390_;
  assign _0394_ = _0292_[7] & _0292_[6];
  assign _0395_ = ~ _0292_[5];
  assign _0396_ = _0391_ & _0395_;
  assign _0397_ = _0391_ & _0292_[5];
  assign _0398_ = _0392_ & _0395_;
  assign _0399_ = _0392_ & _0292_[5];
  assign _0400_ = _0393_ & _0395_;
  assign _0401_ = _0393_ & _0292_[5];
  assign _0402_ = _0394_ & _0395_;
  assign _0403_ = _0394_ & _0292_[5];
  assign _0404_ = ~ _0292_[4];
  assign _0405_ = _0396_ & _0404_;
  assign _0406_ = _0396_ & _0292_[4];
  assign _0407_ = _0397_ & _0404_;
  assign _0408_ = _0397_ & _0292_[4];
  assign _0409_ = _0398_ & _0404_;
  assign _0410_ = _0398_ & _0292_[4];
  assign _0411_ = _0399_ & _0404_;
  assign _0412_ = _0399_ & _0292_[4];
  assign _0413_ = _0400_ & _0404_;
  assign _0414_ = _0400_ & _0292_[4];
  assign _0415_ = _0401_ & _0404_;
  assign _0416_ = _0401_ & _0292_[4];
  assign _0417_ = _0402_ & _0404_;
  assign _0418_ = _0402_ & _0292_[4];
  assign _0419_ = _0403_ & _0404_;
  assign _0420_ = _0403_ & _0292_[4];
  assign _0421_ = ~ _0292_[3];
  assign _0422_ = _0405_ & _0421_;
  assign _0423_ = _0405_ & _0292_[3];
  assign _0424_ = _0406_ & _0421_;
  assign _0425_ = _0406_ & _0292_[3];
  assign _0426_ = _0407_ & _0421_;
  assign _0427_ = _0407_ & _0292_[3];
  assign _0428_ = _0408_ & _0421_;
  assign _0429_ = _0408_ & _0292_[3];
  assign _0430_ = _0409_ & _0421_;
  assign _0431_ = _0409_ & _0292_[3];
  assign _0432_ = _0410_ & _0421_;
  assign _0433_ = _0410_ & _0292_[3];
  assign _0434_ = _0411_ & _0421_;
  assign _0435_ = _0411_ & _0292_[3];
  assign _0436_ = _0412_ & _0421_;
  assign _0437_ = _0412_ & _0292_[3];
  assign _0438_ = _0413_ & _0421_;
  assign _0439_ = _0413_ & _0292_[3];
  assign _0440_ = _0414_ & _0421_;
  assign _0441_ = _0414_ & _0292_[3];
  assign _0442_ = _0415_ & _0421_;
  assign _0443_ = _0415_ & _0292_[3];
  assign _0444_ = _0416_ & _0421_;
  assign _0445_ = _0416_ & _0292_[3];
  assign _0446_ = _0417_ & _0421_;
  assign _0447_ = _0417_ & _0292_[3];
  assign _0448_ = _0418_ & _0421_;
  assign _0449_ = _0418_ & _0292_[3];
  assign _0450_ = _0419_ & _0421_;
  assign _0451_ = _0419_ & _0292_[3];
  assign _0452_ = _0420_ & _0421_;
  assign _0453_ = _0420_ & _0292_[3];
  assign _0454_ = ~ _0292_[2];
  assign _0455_ = _0422_ & _0454_;
  assign _0456_ = _0422_ & _0292_[2];
  assign _0457_ = _0423_ & _0454_;
  assign _0458_ = _0423_ & _0292_[2];
  assign _0459_ = _0424_ & _0454_;
  assign _0460_ = _0424_ & _0292_[2];
  assign _0461_ = _0425_ & _0454_;
  assign _0462_ = _0425_ & _0292_[2];
  assign _0463_ = _0426_ & _0454_;
  assign _0464_ = _0426_ & _0292_[2];
  assign _0465_ = _0427_ & _0454_;
  assign _0466_ = _0427_ & _0292_[2];
  assign _0467_ = _0428_ & _0454_;
  assign _0468_ = _0428_ & _0292_[2];
  assign _0469_ = _0429_ & _0454_;
  assign _0470_ = _0429_ & _0292_[2];
  assign _0471_ = _0430_ & _0454_;
  assign _0472_ = _0430_ & _0292_[2];
  assign _0473_ = _0431_ & _0454_;
  assign _0474_ = _0431_ & _0292_[2];
  assign _0475_ = _0432_ & _0454_;
  assign _0476_ = _0432_ & _0292_[2];
  assign _0477_ = _0433_ & _0454_;
  assign _0478_ = _0433_ & _0292_[2];
  assign _0479_ = _0434_ & _0454_;
  assign _0480_ = _0434_ & _0292_[2];
  assign _0481_ = _0435_ & _0454_;
  assign _0482_ = _0435_ & _0292_[2];
  assign _0483_ = _0436_ & _0454_;
  assign _0484_ = _0436_ & _0292_[2];
  assign _0485_ = _0437_ & _0454_;
  assign _0486_ = _0437_ & _0292_[2];
  assign _0487_ = _0438_ & _0454_;
  assign _0488_ = _0438_ & _0292_[2];
  assign _0489_ = _0439_ & _0454_;
  assign _0490_ = _0439_ & _0292_[2];
  assign _0491_ = _0440_ & _0454_;
  assign _0492_ = _0440_ & _0292_[2];
  assign _0493_ = _0441_ & _0454_;
  assign _0494_ = _0441_ & _0292_[2];
  assign _0495_ = _0442_ & _0454_;
  assign _0496_ = _0442_ & _0292_[2];
  assign _0497_ = _0443_ & _0454_;
  assign _0498_ = _0443_ & _0292_[2];
  assign _0499_ = _0444_ & _0454_;
  assign _0500_ = _0444_ & _0292_[2];
  assign _0501_ = _0445_ & _0454_;
  assign _0502_ = _0445_ & _0292_[2];
  assign _0503_ = _0446_ & _0454_;
  assign _0504_ = _0446_ & _0292_[2];
  assign _0505_ = _0447_ & _0454_;
  assign _0506_ = _0447_ & _0292_[2];
  assign _0507_ = _0448_ & _0454_;
  assign _0508_ = _0448_ & _0292_[2];
  assign _0509_ = _0449_ & _0454_;
  assign _0510_ = _0449_ & _0292_[2];
  assign _0511_ = _0450_ & _0454_;
  assign _0512_ = _0450_ & _0292_[2];
  assign _0513_ = _0451_ & _0454_;
  assign _0514_ = _0451_ & _0292_[2];
  assign _0515_ = _0452_ & _0454_;
  assign _0516_ = _0452_ & _0292_[2];
  assign _0517_ = _0453_ & _0454_;
  assign _0518_ = _0453_ & _0292_[2];
  assign _0519_ = ~ _0292_[1];
  assign _0520_ = _0455_ & _0519_;
  assign _0521_ = _0455_ & _0292_[1];
  assign _0522_ = _0456_ & _0519_;
  assign _0523_ = _0456_ & _0292_[1];
  assign _0524_ = _0457_ & _0519_;
  assign _0525_ = _0457_ & _0292_[1];
  assign _0526_ = _0458_ & _0519_;
  assign _0527_ = _0458_ & _0292_[1];
  assign _0528_ = _0459_ & _0519_;
  assign _0529_ = _0459_ & _0292_[1];
  assign _0530_ = _0460_ & _0519_;
  assign _0531_ = _0460_ & _0292_[1];
  assign _0532_ = _0461_ & _0519_;
  assign _0533_ = _0461_ & _0292_[1];
  assign _0534_ = _0462_ & _0519_;
  assign _0535_ = _0462_ & _0292_[1];
  assign _0536_ = _0463_ & _0519_;
  assign _0537_ = _0463_ & _0292_[1];
  assign _0538_ = _0464_ & _0519_;
  assign _0539_ = _0464_ & _0292_[1];
  assign _0540_ = _0465_ & _0519_;
  assign _0541_ = _0465_ & _0292_[1];
  assign _0542_ = _0466_ & _0519_;
  assign _0543_ = _0466_ & _0292_[1];
  assign _0544_ = _0467_ & _0519_;
  assign _0545_ = _0467_ & _0292_[1];
  assign _0546_ = _0468_ & _0519_;
  assign _0547_ = _0468_ & _0292_[1];
  assign _0548_ = _0469_ & _0519_;
  assign _0549_ = _0469_ & _0292_[1];
  assign _0550_ = _0470_ & _0519_;
  assign _0551_ = _0470_ & _0292_[1];
  assign _0552_ = _0471_ & _0519_;
  assign _0553_ = _0471_ & _0292_[1];
  assign _0554_ = _0472_ & _0519_;
  assign _0555_ = _0472_ & _0292_[1];
  assign _0556_ = _0473_ & _0519_;
  assign _0557_ = _0473_ & _0292_[1];
  assign _0558_ = _0474_ & _0519_;
  assign _0559_ = _0474_ & _0292_[1];
  assign _0560_ = _0475_ & _0519_;
  assign _0561_ = _0475_ & _0292_[1];
  assign _0562_ = _0476_ & _0519_;
  assign _0563_ = _0476_ & _0292_[1];
  assign _0564_ = _0477_ & _0519_;
  assign _0565_ = _0477_ & _0292_[1];
  assign _0566_ = _0478_ & _0519_;
  assign _0567_ = _0478_ & _0292_[1];
  assign _0568_ = _0479_ & _0519_;
  assign _0569_ = _0479_ & _0292_[1];
  assign _0570_ = _0480_ & _0519_;
  assign _0571_ = _0480_ & _0292_[1];
  assign _0572_ = _0481_ & _0519_;
  assign _0573_ = _0481_ & _0292_[1];
  assign _0574_ = _0482_ & _0519_;
  assign _0575_ = _0482_ & _0292_[1];
  assign _0576_ = _0483_ & _0519_;
  assign _0577_ = _0483_ & _0292_[1];
  assign _0578_ = _0484_ & _0519_;
  assign _0579_ = _0484_ & _0292_[1];
  assign _0580_ = _0485_ & _0519_;
  assign _0581_ = _0485_ & _0292_[1];
  assign _0582_ = _0486_ & _0519_;
  assign _0583_ = _0486_ & _0292_[1];
  assign _0584_ = _0487_ & _0519_;
  assign _0585_ = _0487_ & _0292_[1];
  assign _0586_ = _0488_ & _0519_;
  assign _0587_ = _0488_ & _0292_[1];
  assign _0588_ = _0489_ & _0519_;
  assign _0589_ = _0489_ & _0292_[1];
  assign _0590_ = _0490_ & _0519_;
  assign _0591_ = _0490_ & _0292_[1];
  assign _0592_ = _0491_ & _0519_;
  assign _0593_ = _0491_ & _0292_[1];
  assign _0594_ = _0492_ & _0519_;
  assign _0595_ = _0492_ & _0292_[1];
  assign _0596_ = _0493_ & _0519_;
  assign _0597_ = _0493_ & _0292_[1];
  assign _0598_ = _0494_ & _0519_;
  assign _0599_ = _0494_ & _0292_[1];
  assign _0600_ = _0495_ & _0519_;
  assign _0601_ = _0495_ & _0292_[1];
  assign _0602_ = _0496_ & _0519_;
  assign _0603_ = _0496_ & _0292_[1];
  assign _0604_ = _0497_ & _0519_;
  assign _0605_ = _0497_ & _0292_[1];
  assign _0606_ = _0498_ & _0519_;
  assign _0607_ = _0498_ & _0292_[1];
  assign _0608_ = _0499_ & _0519_;
  assign _0609_ = _0499_ & _0292_[1];
  assign _0610_ = _0500_ & _0519_;
  assign _0611_ = _0500_ & _0292_[1];
  assign _0612_ = _0501_ & _0519_;
  assign _0613_ = _0501_ & _0292_[1];
  assign _0614_ = _0502_ & _0519_;
  assign _0615_ = _0502_ & _0292_[1];
  assign _0616_ = _0503_ & _0519_;
  assign _0617_ = _0503_ & _0292_[1];
  assign _0618_ = _0504_ & _0519_;
  assign _0619_ = _0504_ & _0292_[1];
  assign _0620_ = _0505_ & _0519_;
  assign _0621_ = _0505_ & _0292_[1];
  assign _0622_ = _0506_ & _0519_;
  assign _0623_ = _0506_ & _0292_[1];
  assign _0624_ = _0507_ & _0519_;
  assign _0625_ = _0507_ & _0292_[1];
  assign _0626_ = _0508_ & _0519_;
  assign _0627_ = _0508_ & _0292_[1];
  assign _0628_ = _0509_ & _0519_;
  assign _0629_ = _0509_ & _0292_[1];
  assign _0630_ = _0510_ & _0519_;
  assign _0631_ = _0510_ & _0292_[1];
  assign _0632_ = _0511_ & _0519_;
  assign _0633_ = _0511_ & _0292_[1];
  assign _0634_ = _0512_ & _0519_;
  assign _0635_ = _0512_ & _0292_[1];
  assign _0636_ = _0513_ & _0519_;
  assign _0637_ = _0513_ & _0292_[1];
  assign _0638_ = _0514_ & _0519_;
  assign _0639_ = _0514_ & _0292_[1];
  assign _0640_ = _0515_ & _0519_;
  assign _0641_ = _0515_ & _0292_[1];
  assign _0642_ = _0516_ & _0519_;
  assign _0643_ = _0516_ & _0292_[1];
  assign _0644_ = _0517_ & _0519_;
  assign _0645_ = _0517_ & _0292_[1];
  assign _0646_ = _0518_ & _0519_;
  assign _0647_ = _0518_ & _0292_[1];
  assign _0648_ = ~ _0292_[0];
  assign _0649_ = _0520_ & _0648_;
  assign _0650_ = _0520_ & _0292_[0];
  assign _0651_ = _0521_ & _0648_;
  assign _0652_ = _0521_ & _0292_[0];
  assign _0653_ = _0522_ & _0648_;
  assign _0654_ = _0522_ & _0292_[0];
  assign _0655_ = _0523_ & _0648_;
  assign _0656_ = _0523_ & _0292_[0];
  assign _0657_ = _0524_ & _0648_;
  assign _0658_ = _0524_ & _0292_[0];
  assign _0659_ = _0525_ & _0648_;
  assign _0660_ = _0525_ & _0292_[0];
  assign _0661_ = _0526_ & _0648_;
  assign _0662_ = _0526_ & _0292_[0];
  assign _0663_ = _0527_ & _0648_;
  assign _0664_ = _0527_ & _0292_[0];
  assign _0665_ = _0528_ & _0648_;
  assign _0666_ = _0528_ & _0292_[0];
  assign _0667_ = _0529_ & _0648_;
  assign _0668_ = _0529_ & _0292_[0];
  assign _0669_ = _0530_ & _0648_;
  assign _0670_ = _0530_ & _0292_[0];
  assign _0671_ = _0531_ & _0648_;
  assign _0672_ = _0531_ & _0292_[0];
  assign _0673_ = _0532_ & _0648_;
  assign _0674_ = _0532_ & _0292_[0];
  assign _0675_ = _0533_ & _0648_;
  assign _0676_ = _0533_ & _0292_[0];
  assign _0677_ = _0534_ & _0648_;
  assign _0678_ = _0534_ & _0292_[0];
  assign _0679_ = _0535_ & _0648_;
  assign _0680_ = _0535_ & _0292_[0];
  assign _0681_ = _0536_ & _0648_;
  assign _0682_ = _0536_ & _0292_[0];
  assign _0683_ = _0537_ & _0648_;
  assign _0684_ = _0537_ & _0292_[0];
  assign _0685_ = _0538_ & _0648_;
  assign _0686_ = _0538_ & _0292_[0];
  assign _0687_ = _0539_ & _0648_;
  assign _0688_ = _0539_ & _0292_[0];
  assign _0689_ = _0540_ & _0648_;
  assign _0690_ = _0540_ & _0292_[0];
  assign _0691_ = _0541_ & _0648_;
  assign _0692_ = _0541_ & _0292_[0];
  assign _0693_ = _0542_ & _0648_;
  assign _0694_ = _0542_ & _0292_[0];
  assign _0695_ = _0543_ & _0648_;
  assign _0696_ = _0543_ & _0292_[0];
  assign _0697_ = _0544_ & _0648_;
  assign _0698_ = _0544_ & _0292_[0];
  assign _0699_ = _0545_ & _0648_;
  assign _0700_ = _0545_ & _0292_[0];
  assign _0701_ = _0546_ & _0648_;
  assign _0702_ = _0546_ & _0292_[0];
  assign _0703_ = _0547_ & _0648_;
  assign _0704_ = _0547_ & _0292_[0];
  assign _0705_ = _0548_ & _0648_;
  assign _0706_ = _0548_ & _0292_[0];
  assign _0707_ = _0549_ & _0648_;
  assign _0708_ = _0549_ & _0292_[0];
  assign _0709_ = _0550_ & _0648_;
  assign _0710_ = _0550_ & _0292_[0];
  assign _0711_ = _0551_ & _0648_;
  assign _0712_ = _0551_ & _0292_[0];
  assign _0713_ = _0552_ & _0648_;
  assign _0714_ = _0552_ & _0292_[0];
  assign _0715_ = _0553_ & _0648_;
  assign _0716_ = _0553_ & _0292_[0];
  assign _0717_ = _0554_ & _0648_;
  assign _0718_ = _0554_ & _0292_[0];
  assign _0719_ = _0555_ & _0648_;
  assign _0720_ = _0555_ & _0292_[0];
  assign _0721_ = _0556_ & _0648_;
  assign _0722_ = _0556_ & _0292_[0];
  assign _0723_ = _0557_ & _0648_;
  assign _0724_ = _0557_ & _0292_[0];
  assign _0725_ = _0558_ & _0648_;
  assign _0726_ = _0558_ & _0292_[0];
  assign _0727_ = _0559_ & _0648_;
  assign _0728_ = _0559_ & _0292_[0];
  assign _0729_ = _0560_ & _0648_;
  assign _0730_ = _0560_ & _0292_[0];
  assign _0731_ = _0561_ & _0648_;
  assign _0732_ = _0561_ & _0292_[0];
  assign _0733_ = _0562_ & _0648_;
  assign _0734_ = _0562_ & _0292_[0];
  assign _0735_ = _0563_ & _0648_;
  assign _0736_ = _0563_ & _0292_[0];
  assign _0737_ = _0564_ & _0648_;
  assign _0738_ = _0564_ & _0292_[0];
  assign _0739_ = _0565_ & _0648_;
  assign _0740_ = _0565_ & _0292_[0];
  assign _0741_ = _0566_ & _0648_;
  assign _0742_ = _0566_ & _0292_[0];
  assign _0743_ = _0567_ & _0648_;
  assign _0744_ = _0567_ & _0292_[0];
  assign _0745_ = _0568_ & _0648_;
  assign _0746_ = _0568_ & _0292_[0];
  assign _0747_ = _0569_ & _0648_;
  assign _0748_ = _0569_ & _0292_[0];
  assign _0749_ = _0570_ & _0648_;
  assign _0750_ = _0570_ & _0292_[0];
  assign _0751_ = _0571_ & _0648_;
  assign _0752_ = _0571_ & _0292_[0];
  assign _0753_ = _0572_ & _0648_;
  assign _0754_ = _0572_ & _0292_[0];
  assign _0755_ = _0573_ & _0648_;
  assign _0756_ = _0573_ & _0292_[0];
  assign _0757_ = _0574_ & _0648_;
  assign _0758_ = _0574_ & _0292_[0];
  assign _0759_ = _0575_ & _0648_;
  assign _0760_ = _0575_ & _0292_[0];
  assign _0761_ = _0576_ & _0648_;
  assign _0762_ = _0576_ & _0292_[0];
  assign _0763_ = _0577_ & _0648_;
  assign _0764_ = _0577_ & _0292_[0];
  assign _0765_ = _0578_ & _0648_;
  assign _0766_ = _0578_ & _0292_[0];
  assign _0767_ = _0579_ & _0648_;
  assign _0768_ = _0579_ & _0292_[0];
  assign _0769_ = _0580_ & _0648_;
  assign _0770_ = _0580_ & _0292_[0];
  assign _0771_ = _0581_ & _0648_;
  assign _0772_ = _0581_ & _0292_[0];
  assign _0773_ = _0582_ & _0648_;
  assign _0774_ = _0582_ & _0292_[0];
  assign _0775_ = _0583_ & _0648_;
  assign _0776_ = _0583_ & _0292_[0];
  assign _0777_ = _0584_ & _0648_;
  assign _0778_ = _0584_ & _0292_[0];
  assign _0779_ = _0585_ & _0648_;
  assign _0780_ = _0585_ & _0292_[0];
  assign _0781_ = _0586_ & _0648_;
  assign _0782_ = _0586_ & _0292_[0];
  assign _0783_ = _0587_ & _0648_;
  assign _0784_ = _0587_ & _0292_[0];
  assign _0785_ = _0588_ & _0648_;
  assign _0786_ = _0588_ & _0292_[0];
  assign _0787_ = _0589_ & _0648_;
  assign _0788_ = _0589_ & _0292_[0];
  assign _0789_ = _0590_ & _0648_;
  assign _0790_ = _0590_ & _0292_[0];
  assign _0791_ = _0591_ & _0648_;
  assign _0792_ = _0591_ & _0292_[0];
  assign _0793_ = _0592_ & _0648_;
  assign _0794_ = _0592_ & _0292_[0];
  assign _0795_ = _0593_ & _0648_;
  assign _0796_ = _0593_ & _0292_[0];
  assign _0797_ = _0594_ & _0648_;
  assign _0798_ = _0594_ & _0292_[0];
  assign _0799_ = _0595_ & _0648_;
  assign _0800_ = _0595_ & _0292_[0];
  assign _0801_ = _0596_ & _0648_;
  assign _0802_ = _0596_ & _0292_[0];
  assign _0803_ = _0597_ & _0648_;
  assign _0804_ = _0597_ & _0292_[0];
  assign _0805_ = _0598_ & _0648_;
  assign _0806_ = _0598_ & _0292_[0];
  assign _0807_ = _0599_ & _0648_;
  assign _0808_ = _0599_ & _0292_[0];
  assign _0809_ = _0600_ & _0648_;
  assign _0810_ = _0600_ & _0292_[0];
  assign _0811_ = _0601_ & _0648_;
  assign _0812_ = _0601_ & _0292_[0];
  assign _0813_ = _0602_ & _0648_;
  assign _0814_ = _0602_ & _0292_[0];
  assign _0815_ = _0603_ & _0648_;
  assign _0816_ = _0603_ & _0292_[0];
  assign _0817_ = _0604_ & _0648_;
  assign _0818_ = _0604_ & _0292_[0];
  assign _0819_ = _0605_ & _0648_;
  assign _0820_ = _0605_ & _0292_[0];
  assign _0821_ = _0606_ & _0648_;
  assign _0822_ = _0606_ & _0292_[0];
  assign _0823_ = _0607_ & _0648_;
  assign _0824_ = _0607_ & _0292_[0];
  assign _0825_ = _0608_ & _0648_;
  assign _0826_ = _0608_ & _0292_[0];
  assign _0827_ = _0609_ & _0648_;
  assign _0828_ = _0609_ & _0292_[0];
  assign _0829_ = _0610_ & _0648_;
  assign _0830_ = _0610_ & _0292_[0];
  assign _0831_ = _0611_ & _0648_;
  assign _0832_ = _0611_ & _0292_[0];
  assign _0833_ = _0612_ & _0648_;
  assign _0834_ = _0612_ & _0292_[0];
  assign _0835_ = _0613_ & _0648_;
  assign _0836_ = _0613_ & _0292_[0];
  assign _0837_ = _0614_ & _0648_;
  assign _0838_ = _0614_ & _0292_[0];
  assign _0839_ = _0615_ & _0648_;
  assign _0840_ = _0615_ & _0292_[0];
  assign _0841_ = _0616_ & _0648_;
  assign _0842_ = _0616_ & _0292_[0];
  assign _0843_ = _0617_ & _0648_;
  assign _0844_ = _0617_ & _0292_[0];
  assign _0845_ = _0618_ & _0648_;
  assign _0846_ = _0618_ & _0292_[0];
  assign _0847_ = _0619_ & _0648_;
  assign _0848_ = _0619_ & _0292_[0];
  assign _0849_ = _0620_ & _0648_;
  assign _0850_ = _0620_ & _0292_[0];
  assign _0851_ = _0621_ & _0648_;
  assign _0852_ = _0621_ & _0292_[0];
  assign _0853_ = _0622_ & _0648_;
  assign _0854_ = _0622_ & _0292_[0];
  assign _0855_ = _0623_ & _0648_;
  assign _0856_ = _0623_ & _0292_[0];
  assign _0857_ = _0624_ & _0648_;
  assign _0858_ = _0624_ & _0292_[0];
  assign _0859_ = _0625_ & _0648_;
  assign _0860_ = _0625_ & _0292_[0];
  assign _0861_ = _0626_ & _0648_;
  assign _0862_ = _0626_ & _0292_[0];
  assign _0863_ = _0627_ & _0648_;
  assign _0864_ = _0627_ & _0292_[0];
  assign _0865_ = _0628_ & _0648_;
  assign _0866_ = _0628_ & _0292_[0];
  assign _0867_ = _0629_ & _0648_;
  assign _0868_ = _0629_ & _0292_[0];
  assign _0869_ = _0630_ & _0648_;
  assign _0870_ = _0630_ & _0292_[0];
  assign _0871_ = _0631_ & _0648_;
  assign _0872_ = _0631_ & _0292_[0];
  assign _0873_ = _0632_ & _0648_;
  assign _0874_ = _0632_ & _0292_[0];
  assign _0875_ = _0633_ & _0648_;
  assign _0876_ = _0633_ & _0292_[0];
  assign _0877_ = _0634_ & _0648_;
  assign _0878_ = _0634_ & _0292_[0];
  assign _0879_ = _0635_ & _0648_;
  assign _0880_ = _0635_ & _0292_[0];
  assign _0881_ = _0636_ & _0648_;
  assign _0882_ = _0636_ & _0292_[0];
  assign _0883_ = _0637_ & _0648_;
  assign _0884_ = _0637_ & _0292_[0];
  assign _0885_ = _0638_ & _0648_;
  assign _0886_ = _0638_ & _0292_[0];
  assign _0887_ = _0639_ & _0648_;
  assign _0888_ = _0639_ & _0292_[0];
  assign _0889_ = _0640_ & _0648_;
  assign _0890_ = _0640_ & _0292_[0];
  assign _0891_ = _0641_ & _0648_;
  assign _0892_ = _0641_ & _0292_[0];
  assign _0893_ = _0642_ & _0648_;
  assign _0894_ = _0642_ & _0292_[0];
  assign _0895_ = _0643_ & _0648_;
  assign _0896_ = _0643_ & _0292_[0];
  assign _0897_ = _0644_ & _0648_;
  assign _0898_ = _0644_ & _0292_[0];
  assign _0899_ = _0645_ & _0648_;
  assign _0900_ = _0645_ & _0292_[0];
  assign _0901_ = _0646_ & _0648_;
  assign _0902_ = _0646_ & _0292_[0];
  assign _0903_ = _0647_ & _0648_;
  assign _0904_ = _0647_ & _0292_[0];
  assign _0905_ = _0649_ ? m_datain : ram[7:0];
  assign _0906_ = _0650_ ? m_datain : ram[15:8];
  assign _0907_ = _0651_ ? m_datain : ram[23:16];
  assign _0908_ = _0652_ ? m_datain : ram[31:24];
  assign _0909_ = _0653_ ? m_datain : ram[39:32];
  assign _0910_ = _0654_ ? m_datain : ram[47:40];
  assign _0911_ = _0655_ ? m_datain : ram[55:48];
  assign _0912_ = _0656_ ? m_datain : ram[63:56];
  assign _0913_ = _0657_ ? m_datain : ram[71:64];
  assign _0914_ = _0658_ ? m_datain : ram[79:72];
  assign _0915_ = _0659_ ? m_datain : ram[87:80];
  assign _0916_ = _0660_ ? m_datain : ram[95:88];
  assign _0917_ = _0661_ ? m_datain : ram[103:96];
  assign _0918_ = _0662_ ? m_datain : ram[111:104];
  assign _0919_ = _0663_ ? m_datain : ram[119:112];
  assign _0920_ = _0664_ ? m_datain : ram[127:120];
  assign _0921_ = _0665_ ? m_datain : ram[135:128];
  assign _0922_ = _0666_ ? m_datain : ram[143:136];
  assign _0923_ = _0667_ ? m_datain : ram[151:144];
  assign _0924_ = _0668_ ? m_datain : ram[159:152];
  assign _0925_ = _0669_ ? m_datain : ram[167:160];
  assign _0926_ = _0670_ ? m_datain : ram[175:168];
  assign _0927_ = _0671_ ? m_datain : ram[183:176];
  assign _0928_ = _0672_ ? m_datain : ram[191:184];
  assign _0929_ = _0673_ ? m_datain : ram[199:192];
  assign _0930_ = _0674_ ? m_datain : ram[207:200];
  assign _0931_ = _0675_ ? m_datain : ram[215:208];
  assign _0932_ = _0676_ ? m_datain : ram[223:216];
  assign _0933_ = _0677_ ? m_datain : ram[231:224];
  assign _0934_ = _0678_ ? m_datain : ram[239:232];
  assign _0935_ = _0679_ ? m_datain : ram[247:240];
  assign _0936_ = _0680_ ? m_datain : ram[255:248];
  assign _0937_ = _0681_ ? m_datain : ram[263:256];
  assign _0938_ = _0682_ ? m_datain : ram[271:264];
  assign _0939_ = _0683_ ? m_datain : ram[279:272];
  assign _0940_ = _0684_ ? m_datain : ram[287:280];
  assign _0941_ = _0685_ ? m_datain : ram[295:288];
  assign _0942_ = _0686_ ? m_datain : ram[303:296];
  assign _0943_ = _0687_ ? m_datain : ram[311:304];
  assign _0944_ = _0688_ ? m_datain : ram[319:312];
  assign _0945_ = _0689_ ? m_datain : ram[327:320];
  assign _0946_ = _0690_ ? m_datain : ram[335:328];
  assign _0947_ = _0691_ ? m_datain : ram[343:336];
  assign _0948_ = _0692_ ? m_datain : ram[351:344];
  assign _0949_ = _0693_ ? m_datain : ram[359:352];
  assign _0950_ = _0694_ ? m_datain : ram[367:360];
  assign _0951_ = _0695_ ? m_datain : ram[375:368];
  assign _0952_ = _0696_ ? m_datain : ram[383:376];
  assign _0953_ = _0697_ ? m_datain : ram[391:384];
  assign _0954_ = _0698_ ? m_datain : ram[399:392];
  assign _0955_ = _0699_ ? m_datain : ram[407:400];
  assign _0956_ = _0700_ ? m_datain : ram[415:408];
  assign _0957_ = _0701_ ? m_datain : ram[423:416];
  assign _0958_ = _0702_ ? m_datain : ram[431:424];
  assign _0959_ = _0703_ ? m_datain : ram[439:432];
  assign _0960_ = _0704_ ? m_datain : ram[447:440];
  assign _0961_ = _0705_ ? m_datain : ram[455:448];
  assign _0962_ = _0706_ ? m_datain : ram[463:456];
  assign _0963_ = _0707_ ? m_datain : ram[471:464];
  assign _0964_ = _0708_ ? m_datain : ram[479:472];
  assign _0965_ = _0709_ ? m_datain : ram[487:480];
  assign _0966_ = _0710_ ? m_datain : ram[495:488];
  assign _0967_ = _0711_ ? m_datain : ram[503:496];
  assign _0968_ = _0712_ ? m_datain : ram[511:504];
  assign _0969_ = _0713_ ? m_datain : ram[519:512];
  assign _0970_ = _0714_ ? m_datain : ram[527:520];
  assign _0971_ = _0715_ ? m_datain : ram[535:528];
  assign _0972_ = _0716_ ? m_datain : ram[543:536];
  assign _0973_ = _0717_ ? m_datain : ram[551:544];
  assign _0974_ = _0718_ ? m_datain : ram[559:552];
  assign _0975_ = _0719_ ? m_datain : ram[567:560];
  assign _0976_ = _0720_ ? m_datain : ram[575:568];
  assign _0977_ = _0721_ ? m_datain : ram[583:576];
  assign _0978_ = _0722_ ? m_datain : ram[591:584];
  assign _0979_ = _0723_ ? m_datain : ram[599:592];
  assign _0980_ = _0724_ ? m_datain : ram[607:600];
  assign _0981_ = _0725_ ? m_datain : ram[615:608];
  assign _0982_ = _0726_ ? m_datain : ram[623:616];
  assign _0983_ = _0727_ ? m_datain : ram[631:624];
  assign _0984_ = _0728_ ? m_datain : ram[639:632];
  assign _0985_ = _0729_ ? m_datain : ram[647:640];
  assign _0986_ = _0730_ ? m_datain : ram[655:648];
  assign _0987_ = _0731_ ? m_datain : ram[663:656];
  assign _0988_ = _0732_ ? m_datain : ram[671:664];
  assign _0989_ = _0733_ ? m_datain : ram[679:672];
  assign _0990_ = _0734_ ? m_datain : ram[687:680];
  assign _0991_ = _0735_ ? m_datain : ram[695:688];
  assign _0992_ = _0736_ ? m_datain : ram[703:696];
  assign _0993_ = _0737_ ? m_datain : ram[711:704];
  assign _0994_ = _0738_ ? m_datain : ram[719:712];
  assign _0995_ = _0739_ ? m_datain : ram[727:720];
  assign _0996_ = _0740_ ? m_datain : ram[735:728];
  assign _0997_ = _0741_ ? m_datain : ram[743:736];
  assign _0998_ = _0742_ ? m_datain : ram[751:744];
  assign _0999_ = _0743_ ? m_datain : ram[759:752];
  assign _1000_ = _0744_ ? m_datain : ram[767:760];
  assign _1001_ = _0745_ ? m_datain : ram[775:768];
  assign _1002_ = _0746_ ? m_datain : ram[783:776];
  assign _1003_ = _0747_ ? m_datain : ram[791:784];
  assign _1004_ = _0748_ ? m_datain : ram[799:792];
  assign _1005_ = _0749_ ? m_datain : ram[807:800];
  assign _1006_ = _0750_ ? m_datain : ram[815:808];
  assign _1007_ = _0751_ ? m_datain : ram[823:816];
  assign _1008_ = _0752_ ? m_datain : ram[831:824];
  assign _1009_ = _0753_ ? m_datain : ram[839:832];
  assign _1010_ = _0754_ ? m_datain : ram[847:840];
  assign _1011_ = _0755_ ? m_datain : ram[855:848];
  assign _1012_ = _0756_ ? m_datain : ram[863:856];
  assign _1013_ = _0757_ ? m_datain : ram[871:864];
  assign _1014_ = _0758_ ? m_datain : ram[879:872];
  assign _1015_ = _0759_ ? m_datain : ram[887:880];
  assign _1016_ = _0760_ ? m_datain : ram[895:888];
  assign _1017_ = _0761_ ? m_datain : ram[903:896];
  assign _1018_ = _0762_ ? m_datain : ram[911:904];
  assign _1019_ = _0763_ ? m_datain : ram[919:912];
  assign _1020_ = _0764_ ? m_datain : ram[927:920];
  assign _1021_ = _0765_ ? m_datain : ram[935:928];
  assign _1022_ = _0766_ ? m_datain : ram[943:936];
  assign _1023_ = _0767_ ? m_datain : ram[951:944];
  assign _1024_ = _0768_ ? m_datain : ram[959:952];
  assign _1025_ = _0769_ ? m_datain : ram[967:960];
  assign _1026_ = _0770_ ? m_datain : ram[975:968];
  assign _1027_ = _0771_ ? m_datain : ram[983:976];
  assign _1028_ = _0772_ ? m_datain : ram[991:984];
  assign _1029_ = _0773_ ? m_datain : ram[999:992];
  assign _1030_ = _0774_ ? m_datain : ram[1007:1000];
  assign _1031_ = _0775_ ? m_datain : ram[1015:1008];
  assign _1032_ = _0776_ ? m_datain : ram[1023:1016];
  assign _1033_ = _0777_ ? m_datain : ram[1031:1024];
  assign _1034_ = _0778_ ? m_datain : ram[1039:1032];
  assign _1035_ = _0779_ ? m_datain : ram[1047:1040];
  assign _1036_ = _0780_ ? m_datain : ram[1055:1048];
  assign _1037_ = _0781_ ? m_datain : ram[1063:1056];
  assign _1038_ = _0782_ ? m_datain : ram[1071:1064];
  assign _1039_ = _0783_ ? m_datain : ram[1079:1072];
  assign _1040_ = _0784_ ? m_datain : ram[1087:1080];
  assign _1041_ = _0785_ ? m_datain : ram[1095:1088];
  assign _1042_ = _0786_ ? m_datain : ram[1103:1096];
  assign _1043_ = _0787_ ? m_datain : ram[1111:1104];
  assign _1044_ = _0788_ ? m_datain : ram[1119:1112];
  assign _1045_ = _0789_ ? m_datain : ram[1127:1120];
  assign _1046_ = _0790_ ? m_datain : ram[1135:1128];
  assign _1047_ = _0791_ ? m_datain : ram[1143:1136];
  assign _1048_ = _0792_ ? m_datain : ram[1151:1144];
  assign _1049_ = _0793_ ? m_datain : ram[1159:1152];
  assign _1050_ = _0794_ ? m_datain : ram[1167:1160];
  assign _1051_ = _0795_ ? m_datain : ram[1175:1168];
  assign _1052_ = _0796_ ? m_datain : ram[1183:1176];
  assign _1053_ = _0797_ ? m_datain : ram[1191:1184];
  assign _1054_ = _0798_ ? m_datain : ram[1199:1192];
  assign _1055_ = _0799_ ? m_datain : ram[1207:1200];
  assign _1056_ = _0800_ ? m_datain : ram[1215:1208];
  assign _1057_ = _0801_ ? m_datain : ram[1223:1216];
  assign _1058_ = _0802_ ? m_datain : ram[1231:1224];
  assign _1059_ = _0803_ ? m_datain : ram[1239:1232];
  assign _1060_ = _0804_ ? m_datain : ram[1247:1240];
  assign _1061_ = _0805_ ? m_datain : ram[1255:1248];
  assign _1062_ = _0806_ ? m_datain : ram[1263:1256];
  assign _1063_ = _0807_ ? m_datain : ram[1271:1264];
  assign _1064_ = _0808_ ? m_datain : ram[1279:1272];
  assign _1065_ = _0809_ ? m_datain : ram[1287:1280];
  assign _1066_ = _0810_ ? m_datain : ram[1295:1288];
  assign _1067_ = _0811_ ? m_datain : ram[1303:1296];
  assign _1068_ = _0812_ ? m_datain : ram[1311:1304];
  assign _1069_ = _0813_ ? m_datain : ram[1319:1312];
  assign _1070_ = _0814_ ? m_datain : ram[1327:1320];
  assign _1071_ = _0815_ ? m_datain : ram[1335:1328];
  assign _1072_ = _0816_ ? m_datain : ram[1343:1336];
  assign _0174_ = _0817_ ? m_datain : ram[1351:1344];
  assign _0175_ = _0818_ ? m_datain : ram[1359:1352];
  assign _0176_ = _0819_ ? m_datain : ram[1367:1360];
  assign _0177_ = _0820_ ? m_datain : ram[1375:1368];
  assign _0178_ = _0821_ ? m_datain : ram[1383:1376];
  assign _0179_ = _0822_ ? m_datain : ram[1391:1384];
  assign _0180_ = _0823_ ? m_datain : ram[1399:1392];
  assign _0181_ = _0824_ ? m_datain : ram[1407:1400];
  assign _0182_ = _0825_ ? m_datain : ram[1415:1408];
  assign _0183_ = _0826_ ? m_datain : ram[1423:1416];
  assign _0184_ = _0827_ ? m_datain : ram[1431:1424];
  assign _0185_ = _0828_ ? m_datain : ram[1439:1432];
  assign _0186_ = _0829_ ? m_datain : ram[1447:1440];
  assign _0187_ = _0830_ ? m_datain : ram[1455:1448];
  assign _0188_ = _0831_ ? m_datain : ram[1463:1456];
  assign _0189_ = _0832_ ? m_datain : ram[1471:1464];
  assign _0190_ = _0833_ ? m_datain : ram[1479:1472];
  assign _0191_ = _0834_ ? m_datain : ram[1487:1480];
  assign _0192_ = _0835_ ? m_datain : ram[1495:1488];
  assign _0193_ = _0836_ ? m_datain : ram[1503:1496];
  assign _0194_ = _0837_ ? m_datain : ram[1511:1504];
  assign _0195_ = _0838_ ? m_datain : ram[1519:1512];
  assign _0196_ = _0839_ ? m_datain : ram[1527:1520];
  assign _0197_ = _0840_ ? m_datain : ram[1535:1528];
  assign _0198_ = _0841_ ? m_datain : ram[1543:1536];
  assign _0199_ = _0842_ ? m_datain : ram[1551:1544];
  assign _0200_ = _0843_ ? m_datain : ram[1559:1552];
  assign _0201_ = _0844_ ? m_datain : ram[1567:1560];
  assign _0202_ = _0845_ ? m_datain : ram[1575:1568];
  assign _0203_ = _0846_ ? m_datain : ram[1583:1576];
  assign _0204_ = _0847_ ? m_datain : ram[1591:1584];
  assign _0205_ = _0848_ ? m_datain : ram[1599:1592];
  assign _0206_ = _0849_ ? m_datain : ram[1607:1600];
  assign _0207_ = _0850_ ? m_datain : ram[1615:1608];
  assign _0208_ = _0851_ ? m_datain : ram[1623:1616];
  assign _0209_ = _0852_ ? m_datain : ram[1631:1624];
  assign _0210_ = _0853_ ? m_datain : ram[1639:1632];
  assign _0211_ = _0854_ ? m_datain : ram[1647:1640];
  assign _0212_ = _0855_ ? m_datain : ram[1655:1648];
  assign _0213_ = _0856_ ? m_datain : ram[1663:1656];
  assign _0214_ = _0857_ ? m_datain : ram[1671:1664];
  assign _0215_ = _0858_ ? m_datain : ram[1679:1672];
  assign _0216_ = _0859_ ? m_datain : ram[1687:1680];
  assign _0217_ = _0860_ ? m_datain : ram[1695:1688];
  assign _0218_ = _0861_ ? m_datain : ram[1703:1696];
  assign _0219_ = _0862_ ? m_datain : ram[1711:1704];
  assign _0220_ = _0863_ ? m_datain : ram[1719:1712];
  assign _0221_ = _0864_ ? m_datain : ram[1727:1720];
  assign _0222_ = _0865_ ? m_datain : ram[1735:1728];
  assign _0223_ = _0866_ ? m_datain : ram[1743:1736];
  assign _0224_ = _0867_ ? m_datain : ram[1751:1744];
  assign _0225_ = _0868_ ? m_datain : ram[1759:1752];
  assign _0226_ = _0869_ ? m_datain : ram[1767:1760];
  assign _0227_ = _0870_ ? m_datain : ram[1775:1768];
  assign _0228_ = _0871_ ? m_datain : ram[1783:1776];
  assign _0229_ = _0872_ ? m_datain : ram[1791:1784];
  assign _0230_ = _0873_ ? m_datain : ram[1799:1792];
  assign _0231_ = _0874_ ? m_datain : ram[1807:1800];
  assign _0232_ = _0875_ ? m_datain : ram[1815:1808];
  assign _0233_ = _0876_ ? m_datain : ram[1823:1816];
  assign _0234_ = _0877_ ? m_datain : ram[1831:1824];
  assign _0235_ = _0878_ ? m_datain : ram[1839:1832];
  assign _0236_ = _0879_ ? m_datain : ram[1847:1840];
  assign _0237_ = _0880_ ? m_datain : ram[1855:1848];
  assign _0238_ = _0881_ ? m_datain : ram[1863:1856];
  assign _0239_ = _0882_ ? m_datain : ram[1871:1864];
  assign _0240_ = _0883_ ? m_datain : ram[1879:1872];
  assign _0241_ = _0884_ ? m_datain : ram[1887:1880];
  assign _0242_ = _0885_ ? m_datain : ram[1895:1888];
  assign _0243_ = _0886_ ? m_datain : ram[1903:1896];
  assign _0244_ = _0887_ ? m_datain : ram[1911:1904];
  assign _0245_ = _0888_ ? m_datain : ram[1919:1912];
  assign _0246_ = _0889_ ? m_datain : ram[1927:1920];
  assign _0247_ = _0890_ ? m_datain : ram[1935:1928];
  assign _0248_ = _0891_ ? m_datain : ram[1943:1936];
  assign _0249_ = _0892_ ? m_datain : ram[1951:1944];
  assign _0250_ = _0893_ ? m_datain : ram[1959:1952];
  assign _0251_ = _0894_ ? m_datain : ram[1967:1960];
  assign _0252_ = _0895_ ? m_datain : ram[1975:1968];
  assign _0253_ = _0896_ ? m_datain : ram[1983:1976];
  assign _0254_ = _0897_ ? m_datain : ram[1991:1984];
  assign _0255_ = _0898_ ? m_datain : ram[1999:1992];
  assign _0256_ = _0899_ ? m_datain : ram[2007:2000];
  assign _0257_ = _0900_ ? m_datain : ram[2015:2008];
  assign _0258_ = _0901_ ? m_datain : ram[2023:2016];
  assign _0259_ = _0902_ ? m_datain : ram[2031:2024];
  assign _0260_ = _0903_ ? m_datain : ram[2039:2032];
  assign _0261_ = _0904_ ? m_datain : ram[2047:2040];
  assign _0262_ = ~ m_reset;
  assign _0263_ = m_start_dump ? 1'h0 : _0300_;
  assign _0264_ = m_start_dump ? 8'h00 : shift_reg;
  assign _0265_ = m_start_dump ? 32'd0 : shift_counter;
  assign _0266_ = m_start_dump ? 2'h1 : 2'h0;
  assign _0267_ = m_start_dump ? 32'd0 : \statemachine.counter ;
  assign _0268_ = \statemachine.current_state  == 2'h0;
  assign _0269_ = \statemachine.counter  == 32'd255;
  assign _0270_ = 8'hff - \statemachine.counter [7:0];
  assign _0271_ = \statemachine.counter  + 32'd1;
  assign _0272_ = _0269_ ? shift_reg : _0385_;
  assign _0273_ = _0269_ ? 2'h0 : 2'h2;
  assign _0274_ = _0269_ ? \statemachine.counter  : _0271_;
  assign _0275_ = \statemachine.current_state  == 2'h1;
  assign _0276_ = shift_counter == 32'd8;
  assign _0277_ = shift_counter + 32'd1;
  assign _0278_ = _0276_ ? _0300_ : data_out_temp;
  assign _0279_ = _0276_ ? shift_counter : _0277_;
  assign _0280_ = _0276_ ? data_out_temp : _0388_;
  assign _0281_ = _0276_ ? 2'h0 : \statemachine.current_state ;
  assign _0282_ = \statemachine.current_state  == 2'h2;
  function [0:0] \512 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \512  = b[0:0];
      3'b?1?:
        \512  = b[1:1];
      3'b1??:
        \512  = b[2:2];
      default:
        \512  = a;
    endcase
  endfunction
  assign _0283_ = \512 (1'hx, { _0278_, _0300_, _0263_ }, { _0282_, _0275_, _0268_ });
  function [7:0] \514 ;
    input [7:0] a;
    input [23:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \514  = b[7:0];
      3'b?1?:
        \514  = b[15:8];
      3'b1??:
        \514  = b[23:16];
      default:
        \514  = a;
    endcase
  endfunction
  assign _0284_ = \514 (8'hxx, { shift_reg, _0272_, _0264_ }, { _0282_, _0275_, _0268_ });
  function [31:0] \516 ;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \516  = b[31:0];
      3'b?1?:
        \516  = b[63:32];
      3'b1??:
        \516  = b[95:64];
      default:
        \516  = a;
    endcase
  endfunction
  assign _0285_ = \516 (32'hxxxxxxxx, { _0279_, shift_counter, _0265_ }, { _0282_, _0275_, _0268_ });
  function [0:0] \518 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \518  = b[0:0];
      3'b?1?:
        \518  = b[1:1];
      3'b1??:
        \518  = b[2:2];
      default:
        \518  = a;
    endcase
  endfunction
  assign _0286_ = \518 (1'hx, { _0280_, data_out_temp, data_out_temp }, { _0282_, _0275_, _0268_ });
  function [1:0] \520 ;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \520  = b[1:0];
      3'b?1?:
        \520  = b[3:2];
      3'b1??:
        \520  = b[5:4];
      default:
        \520  = a;
    endcase
  endfunction
  assign _0287_ = \520 (2'hx, { _0281_, _0273_, _0266_ }, { _0282_, _0275_, _0268_ });
  function [31:0] \522 ;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \522  = b[31:0];
      3'b?1?:
        \522  = b[63:32];
      3'b1??:
        \522  = b[95:64];
      default:
        \522  = a;
    endcase
  endfunction
  assign _0288_ = \522 (32'hxxxxxxxx, { \statemachine.counter , _0274_, _0267_ }, { _0282_, _0275_, _0268_ });
  always @(posedge m_clock, posedge _0262_)
    if (_0262_) _0289_ <= 2'h0;
    else _0289_ <= _0287_;
  always @(posedge m_clock, posedge _0262_)
    if (_0262_) _0290_ <= 32'd0;
    else _0290_ <= _0288_;
  assign _0291_ = ~ m_reset;
  assign _0292_ = 8'hff - m_address;
  assign _0293_ = m_write_e ? { _0261_, _0260_, _0259_, _0258_, _0257_, _0256_, _0255_, _0254_, _0253_, _0252_, _0251_, _0250_, _0249_, _0248_, _0247_, _0246_, _0245_, _0244_, _0243_, _0242_, _0241_, _0240_, _0239_, _0238_, _0237_, _0236_, _0235_, _0234_, _0233_, _0232_, _0231_, _0230_, _0229_, _0228_, _0227_, _0226_, _0225_, _0224_, _0223_, _0222_, _0221_, _0220_, _0219_, _0218_, _0217_, _0216_, _0215_, _0214_, _0213_, _0212_, _0211_, _0210_, _0209_, _0208_, _0207_, _0206_, _0205_, _0204_, _0203_, _0202_, _0201_, _0200_, _0199_, _0198_, _0197_, _0196_, _0195_, _0194_, _0193_, _0192_, _0191_, _0190_, _0189_, _0188_, _0187_, _0186_, _0185_, _0184_, _0183_, _0182_, _0181_, _0180_, _0179_, _0178_, _0177_, _0176_, _0175_, _0174_, _1072_, _1071_, _1070_, _1069_, _1068_, _1067_, _1066_, _1065_, _1064_, _1063_, _1062_, _1061_, _1060_, _1059_, _1058_, _1057_, _1056_, _1055_, _1054_, _1053_, _1052_, _1051_, _1050_, _1049_, _1048_, _1047_, _1046_, _1045_, _1044_, _1043_, _1042_, _1041_, _1040_, _1039_, _1038_, _1037_, _1036_, _1035_, _1034_, _1033_, _1032_, _1031_, _1030_, _1029_, _1028_, _1027_, _1026_, _1025_, _1024_, _1023_, _1022_, _1021_, _1020_, _1019_, _1018_, _1017_, _1016_, _1015_, _1014_, _1013_, _1012_, _1011_, _1010_, _1009_, _1008_, _1007_, _1006_, _1005_, _1004_, _1003_, _1002_, _1001_, _1000_, _0999_, _0998_, _0997_, _0996_, _0995_, _0994_, _0993_, _0992_, _0991_, _0990_, _0989_, _0988_, _0987_, _0986_, _0985_, _0984_, _0983_, _0982_, _0981_, _0980_, _0979_, _0978_, _0977_, _0976_, _0975_, _0974_, _0973_, _0972_, _0971_, _0970_, _0969_, _0968_, _0967_, _0966_, _0965_, _0964_, _0963_, _0962_, _0961_, _0960_, _0959_, _0958_, _0957_, _0956_, _0955_, _0954_, _0953_, _0952_, _0951_, _0950_, _0949_, _0948_, _0947_, _0946_, _0945_, _0944_, _0943_, _0942_, _0941_, _0940_, _0939_, _0938_, _0937_, _0936_, _0935_, _0934_, _0933_, _0932_, _0931_, _0930_, _0929_, _0928_, _0927_, _0926_, _0925_, _0924_, _0923_, _0922_, _0921_, _0920_, _0919_, _0918_, _0917_, _0916_, _0915_, _0914_, _0913_, _0912_, _0911_, _0910_, _0909_, _0908_, _0907_, _0906_, _0905_ } : ram;
  always @(posedge m_clock, posedge _0291_)
    if (_0291_) _0294_ <= 2048'h
    else _0294_ <= _0293_;
  always @(posedge m_clock, posedge _0262_)
    if (_0262_) _0295_ <= 8'h00;
    else _0295_ <= _0284_;
  always @(posedge m_clock, posedge _0262_)
    if (_0262_) _0296_ <= 32'd0;
    else _0296_ <= _0285_;
  assign _0297_ = ~ _0262_;
  assign _0298_ = _0297_ ? _0286_ : data_out_temp;
  always @(posedge m_clock)
    _0299_ <= _0298_;
  always @(posedge m_clock, posedge _0262_)
    if (_0262_) _0300_ <= 1'h0;
    else _0300_ <= _0283_;
  assign ram = _0294_;
  assign shift_reg = _0295_;
  assign shift_counter = _0296_;
  assign data_out_temp = _0299_;
  assign \statemachine.current_state  = _0289_;
  assign \statemachine.counter  = _0290_;
  assign m_data_dump = _0300_;
endmodule
